// Generated by CoffeeScript 1.11.1
(function() {
  var Player, exports,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = this;

  Player = (function(superClass) {
    extend(Player, superClass);

    Player.prototype.VELOCITY = 1;

    function Player(game) {
      this.InitSprite(game, 0, 0);
      this.Bind.WebGLTexture("player");
      this.bullets = new Torch.SpriteGroup(null, game).Factory(Bullet);
      this.lock = false;
      this.On("Click", function(event) {
        return alert("click");
      });
      this.On("Collision", (function(_this) {
        return function(event) {};
      })(this));
    }

    Player.prototype.Update = function() {
      var keys;
      Player.__super__.Update.call(this);
      keys = this.game.Keys;
      this.Velocity("x", 0);
      this.Velocity("y", 0);
      if (keys.D.down) {
        this.Velocity("x", this.VELOCITY);
      }
      if (keys.A.down) {
        this.Velocity("x", -this.VELOCITY);
      }
      if (keys.S.down) {
        this.Velocity("y", this.VELOCITY);
      }
      if (keys.W.down) {
        this.Velocity("y", -this.VELOCITY);
      }
      if (keys.Space.down) {
        if (!this.lock) {
          this.Shoot();
          return this.lock = true;
        }
      } else {
        return this.lock = false;
      }
    };

    Player.prototype.Shoot = function() {
      return this.bullets.Add(null, this.Position("x") + this.Width() / 2, this.Position("y") - this.Height() / 2, this);
    };

    return Player;

  })(Torch.Sprite);

  exports.Player = Player;

}).call(this);
