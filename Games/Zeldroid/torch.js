// Generated by CoffeeScript 1.12.1
(function() {
  var AABB, AjaxLoader, Animation, AnimationManager, ArrayUtility, Audio, AudioPlayer, Bind, BodyManager, Camera, CanvasBind, CanvasGame, CanvasRenderer, Circle, Collision, CollisionDetector, CollisionManager, Color, Debug, DebugConsole, EffectManager, Electron, Enum, Event, EventDispatcher, EventManager, FunctionUtility, FutureEvent, Game, GhostSprite, GridManager, HookManager, JerkFollow, Key, Keys, Layer, Layers, Load, Loop, MathUtility, Mouse, ObjectUtility, ParticleEmitter, ParticleManager, Point, Rectangle, SizeManager, Sound, Sprite, SpriteGrid, SpriteGroup, SpriteSheetAnimation, State, StateMachine, StateMachineManager, StringUtility, Style, Task, Text, Timer, Torch, Trashable, Tween, TweenManager, TweenSetup, Utilities, Vector, Viewport, _measureCanvas, exports,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  if (typeof window !== "undefined" && window !== null) {
    window.onerror = function() {
      var args, errorObj;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!window.Torch.STRICT_ERRORS) {
        return;
      }
      document.body.style.backgroundColor = "black";
      errorObj = args[4];
      if (errorObj !== void 0) {
        return Torch.FatalError(errorObj);
      } else {
        return Torch.FatalError("An error has occured");
      }
    };
  }

  Function.prototype.MixIn = Function.prototype.is = function(otherFunction) {
    var items, key, proto, value;
    proto = this.prototype;
    items = Object.create(otherFunction.prototype);
    for (key in items) {
      value = items[key];
      proto[key] = value;
    }
    return this;
  };

  String.prototype.format = function() {
    var args, replacer;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    replacer = function(match, number) {
      if (typeof args[number] !== void 0) {
        return args[number];
      }
      if (typeof args[number] === void 0) {
        return match;
      }
    };
    return this.replace(/{(\d+)}/g, replacer);
  };

  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  String.prototype.unCapitalize = function() {
    return this.charAt(0).toLowerCase() + this.slice(1);
  };

  EventDispatcher = (function() {
    function EventDispatcher() {}

    EventDispatcher.dispatchers = [];

    EventDispatcher.prototype.InitEventDispatch = function() {
      this.events = {};
      return EventDispatcher.dispatchers.push(this);
    };

    EventDispatcher.prototype.On = function(eventName, eventHandle) {
      var eventNest;
      if (!this.events[eventName]) {
        eventNest = [];
        eventNest.triggers = 0;
        this.events[eventName] = eventNest;
      }
      this.events[eventName].push(eventHandle);
      return this;
    };

    EventDispatcher.prototype.Emit = function(eventName, eventArgs) {
      var ev, k, len, ref;
      if (this.events[eventName] !== void 0) {
        ref = this.events[eventName];
        for (k = 0, len = ref.length; k < len; k++) {
          ev = ref[k];
          this.events[eventName].triggers++;
          ev(eventArgs);
        }
      }
      return this;
    };

    EventDispatcher.prototype.Off = function(eventName) {
      var key, ref, val;
      if (eventName == null) {
        eventName = "";
      }
      if (eventName !== "") {
        this.events[eventName] = void 0;
      } else {
        ref = this.events;
        for (key in ref) {
          val = ref[key];
          this.events[key] = void 0;
        }
      }
      return this;
    };

    return EventDispatcher;

  })();

  Trashable = (function() {
    function Trashable() {}

    Trashable.prototype.trash = false;

    Trashable.prototype.Trash = function() {
      this.trash = true;
      return this;
    };

    return Trashable;

  })();

  DebugConsole = (function() {
    DebugConsole.prototype.enabled = false;

    DebugConsole.prototype.console = null;

    DebugConsole.prototype.consoleInput = null;

    DebugConsole.prototype.consoleOutput = null;

    DebugConsole.prototype.commands = null;

    DebugConsole.prototype.variables = null;

    function DebugConsole(game1) {
      var div, html;
      this.game = game1;
      html = "<div id = \"torch-console\" style = \"position: absolute;z-index: 100;top:0;border: 1px solid orange;background-color:black\">\n    <p style = \"color:white;margin-left:1%;font-family:monospace\">Torch Dev Console. Type /HELP for usage</p>\n    <input type=\"text\" id = \"torch-console-input\" placeholder=\"Torch Dev Console, type /HELP for usage\"/ style = \"outline: none;border: none;font-family: monospace;color: white;background-color: black;font-size: 16px;padding: 3%;width: 100%;\" />\n    <div id = \"torch-console-output\" style = \"overflow:auto;outline: none;border: none;font-family: monospace;color: white;background-color: black;font-size: 14px;padding: 1%;width: 98%;height:250px\"></div>\n</div>";
      div = document.createElement("div");
      div.innerHTML = html;
      div.style.display = "none";
      document.body.appendChild(div);
      this.console = div;
      this.consoleInput = document.getElementById("torch-console-input");
      this.consoleOutput = document.getElementById("torch-console-output");
      this.commands = {};
      this.variables = {};
      this.LoadDefaultCommands();
      document.addEventListener("keypress", (function(_this) {
        return function(e) {
          if (e.keyCode === 47) {
            return _this.Toggle(true);
          } else if (e.keyCode === 13) {
            return _this.ParseCommand();
          }
        };
      })(this));
      document.addEventListener("keydown", (function(_this) {
        return function(e) {
          if (e.keyCode === 27) {
            return _this.Toggle(false);
          }
        };
      })(this));
    }

    DebugConsole.prototype.Toggle = function(tog) {
      if (tog == null) {
        tog = true;
      }
      if (tog) {
        this.console.style.display = "block";
        this.consoleInput.focus();
        return this.enabled = true;
      } else {
        this.console.style.display = "none";
        this.consoleInput.value = "";
        return this.enabled = false;
      }
    };

    DebugConsole.prototype.Output = function(content, color) {
      if (color == null) {
        color = "white";
      }
      content = content.replace(/\n/g, "<br>");
      return this.consoleOutput.innerHTML += "<p style='color:orange'>TorchDev$</p><p style='color:" + color + "'>" + content + "</p>";
    };

    DebugConsole.prototype.ParseCommand = function() {
      var args, command, commandText, index, k, len, option, ref;
      if (!this.enabled) {
        return;
      }
      commandText = this.consoleInput.value;
      commandText = commandText.replace(/\$(.*?)\$/g, (function(_this) {
        return function(text) {
          var clippedText;
          clippedText = text.substring(1, text.length - 1);
          return _this.variables[clippedText];
        };
      })(this));
      command = commandText.split(" ")[0].split("/")[1];
      args = [];
      ref = commandText.split(" ");
      for (index = k = 0, len = ref.length; k < len; index = ++k) {
        option = ref[index];
        if (index !== 0) {
          args.push(option);
        }
      }
      return this.ExecuteCommand(command, args);
    };

    DebugConsole.prototype.ExecuteCommand = function(command, args) {
      var ref;
      if (!this.commands[command]) {
        this.Output("Command '" + command + "' does not exist.", "red");
      } else {
        return (ref = this.commands)[command].apply(ref, [this].concat(slice.call(args)));
      }
    };

    DebugConsole.prototype.AddCommand = function(name, callback) {
      return this.commands[name] = callback;
    };

    DebugConsole.prototype.LoadDefaultCommands = function() {
      this.AddCommand("HELP", (function(_this) {
        return function(tConsole) {
          return tConsole.Output("type '/HELP' for help\ntype '/FPS' for frame rate\ntype '/TIME' for game time\ntype '/E [statement]' to execute a JavaScript statement\ntype '/RUN [path] to load and execute a JavaScript file'");
        };
      })(this));
      this.AddCommand("CLEAR", (function(_this) {
        return function(tConsole) {
          return _this.consoleOutput.innerHTML = "";
        };
      })(this));
      this.AddCommand("FPS", (function(_this) {
        return function(tConsole) {
          return tConsole.Output("Current FPS: " + _this.game.fps + "\nAverage FPS: " + 0);
        };
      })(this));
      this.AddCommand("TIME", (function(_this) {
        return function(tConsole) {
          return tConsole.Output("Total Game Time: " + _this.game.time + "\nDelta Time: " + _this.game.deltaTime);
        };
      })(this));
      this.AddCommand("RUN", (function(_this) {
        return function(tConsole, filePath) {
          var loader;
          loader = new Torch.AjaxLoader(filePath, Torch.AjaxData.Text);
          loader.Finish(function(data) {
            var error;
            try {
              eval(data);
              return tConsole.Output("File Executed", "green");
            } catch (error1) {
              error = error1;
              return tConsole.Output("File: '" + statement + "' caused an error. " + error, "red");
            }
          });
          return loader.Load();
        };
      })(this));
      this.AddCommand("SET", (function(_this) {
        return function(tConsole, name, value) {
          if (isNaN(value)) {
            _this.variables[name] = value;
          } else {
            _this.variables[name] = parseFloat(value);
          }
          return _this.Output("Set " + name + " to " + value, "green");
        };
      })(this));
      return this.AddCommand("E", (function(_this) {
        return function(tConsole, statement) {
          var error;
          try {
            eval(statement);
            return tConsole.Output("Statment Executed", "green");
          } catch (error1) {
            error = error1;
            return tConsole.Output("Statement: '" + statement + "' caused an error. " + error, "red");
          }
        };
      })(this));
    };

    return DebugConsole;

  })();

  BodyManager = (function() {
    function BodyManager(sprite1) {
      this.sprite = sprite1;
      this.game = this.sprite.game;
      this.velocity = new Vector(0, 0);
      this.acceleration = new Vector(0, 0);
      this.omega = 0;
      this.alpha = 0;
    }

    BodyManager.prototype.Update = function() {
      this.sprite.position.x += this.velocity.x * this.game.Loop.updateDelta;
      this.sprite.position.y += this.velocity.y * this.game.Loop.updateDelta;
      this.velocity.x += this.acceleration.x * this.game.Loop.updateDelta;
      this.velocity.y += this.acceleration.y * this.game.Loop.updateDelta;
      return this.sprite.rotation += this.omega * this.game.Loop.updateDelta;
    };

    BodyManager.prototype.Debug = function(turnOn) {
      if (turnOn == null) {
        turnOn = true;
      }
      return this.DEBUG = turnOn;
    };

    BodyManager.prototype.AngleTo = function(otherSprite) {
      var directionVector;
      directionVector = this.DirectionTo(otherSprite);
      return directionVector.angle;
    };

    BodyManager.prototype.DistanceTo = function(otherSprite) {
      var otherVec, thisVec;
      thisVec = new Vector(this.sprite.position.x, this.sprite.position.y);
      otherVec = new Vector(otherSprite.position.x, otherSprite.position.y);
      otherVec.SubtractVector(thisVec);
      return otherVec.magnitude;
    };

    BodyManager.prototype.DirectionTo = function(otherSprite) {
      var vec;
      vec = new Vector(otherSprite.position.x - this.sprite.position.x, otherSprite.position.y - this.sprite.position.y);
      vec.Normalize();
      return vec;
    };

    return BodyManager;

  })();

  SizeManager = (function() {
    SizeManager.prototype.width = 0;

    SizeManager.prototype.height = 0;

    SizeManager.prototype.scale = null;

    function SizeManager(sprite1) {
      var rect;
      this.sprite = sprite1;
      rect = this.sprite.rectangle;
      this.width = rect.width;
      this.height = rect.height;
      this.scale = {
        width: 1,
        height: 1
      };
    }

    SizeManager.prototype.Update = function() {
      var rect;
      rect = this.sprite.rectangle;
      rect.width = this.width * this.scale.width;
      return rect.height = this.height * this.scale.height;
    };

    SizeManager.prototype.Set = function(width, height) {
      this.width = width;
      return this.height = height;
    };

    SizeManager.prototype.Scale = function(widthScale, heightScale) {
      this.scale.width = widthScale;
      return this.scale.height = heightScale;
    };

    return SizeManager;

  })();

  EventManager = (function() {
    EventManager.prototype.mouseOver = false;

    EventManager.prototype.clickTrigger = false;

    EventManager.prototype.clickAwayTrigger = false;

    EventManager.prototype.draw = true;

    EventManager.prototype.wasClicked = false;

    function EventManager(sprite1) {
      this.sprite = sprite1;
      this.game = this.sprite.game;
    }

    EventManager.prototype.Update = function() {
      var mouseRec, reComputedMouseRec;
      if (!this.game.Mouse.GetRectangle().Intersects(this.sprite.rectangle) && this.mouseOver) {
        this.mouseOver = false;
        this.sprite.Emit("MouseLeave", new Torch.Event(this.game, {
          sprite: this.sprite
        }));
      }
      if (this.game.Mouse.GetRectangle(this.game).Intersects(this.sprite.rectangle)) {
        if (!this.mouseOver) {
          this.sprite.Emit("MouseOver", new Torch.Event(this.game, {
            sprite: this.sprite
          }));
        }
        this.mouseOver = true;
      } else if (this.sprite.fixed) {
        mouseRec = this.game.Mouse.GetRectangle();
        reComputedMouseRec = new Rectangle(mouseRec.x, mouseRec.y, mouseRec.width, mouseRec.height);
        reComputedMouseRec.x += this.game.Camera.position.x;
        reComputedMouseRec.y += this.game.Camera.position.y;
        if (reComputedMouseRec.Intersects(this.sprite.rectangle)) {
          this.mouseOver = true;
        } else {
          this.mouseOver = false;
        }
      } else {
        this.mouseOver = false;
      }
      if (this.mouseOver && this.game.Mouse.down && !this.clickTrigger) {
        this.clickTrigger = true;
      }
      if (this.clickTrigger && !this.game.Mouse.down && this.mouseOver) {
        this.wasClicked = true;
        this.sprite.Emit("Click", new Torch.Event(this.game, {
          sprite: this.sprite
        }));
        this.clickTrigger = false;
      }
      if (this.clickTrigger && !this.game.Mouse.down && !this.mouseOver) {
        this.clickTrigger = false;
      }
      if (!this.game.Mouse.down && !this.mouseOver && this.clickAwayTrigger) {
        this.sprite.Emit("ClickAway", new Torch.Event(this.game, {
          sprite: this.sprite
        }));
        this.wasClicked = false;
        return this.clickAwayTrigger = false;
      } else if (this.clickTrigger && !this.game.Mouse.down && this.mouseOver) {
        return this.clickAwayTrigger = false;
      } else if (this.game.Mouse.down && !this.mouseOver) {
        return this.clickAwayTrigger = true;
      }
    };

    return EventManager;

  })();

  EffectManager = (function() {
    EffectManager.prototype.tint = null;

    EffectManager.prototype.mask = null;

    function EffectManager(sprite1) {
      this.sprite = sprite1;
      this.tint = {
        color: null,
        opacity: 0.5
      };
      this.mask = {
        texture: null,
        "in": false,
        out: false
      };
    }

    return EffectManager;

  })();

  StateMachineManager = (function() {
    function StateMachineManager(sprite1) {
      this.sprite = sprite1;
      this.stateMachines = {};
    }

    StateMachineManager.prototype.CreateStateMachine = function(name) {
      this.stateMachines[name] = new StateMachine(this.sprite);
      return this.stateMachines[name];
    };

    StateMachineManager.prototype.GetStateMachine = function(name) {
      return this.stateMachines[name];
    };

    StateMachineManager.prototype.Update = function() {
      var key, ref, results, sm;
      ref = this.stateMachines;
      results = [];
      for (key in ref) {
        sm = ref[key];
        results.push(sm.Update());
      }
      return results;
    };

    return StateMachineManager;

  })();

  GridManager = (function() {
    GridManager.prototype.parent = null;

    GridManager.prototype.children = null;

    GridManager.prototype.centered = false;

    GridManager.prototype.centerVertical = false;

    GridManager.prototype.alignLeft = false;

    GridManager.prototype.alignRight = false;

    GridManager.prototype.alignTop = false;

    GridManager.prototype.alignBottom = false;

    function GridManager(sprite1) {
      this.sprite = sprite1;
      this.position = new Point(0, 0);
      this.children = [];
    }

    GridManager.prototype.Align = function() {
      var k, len, positionTags, results, tag;
      positionTags = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (k = 0, len = positionTags.length; k < len; k++) {
        tag = positionTags[k];
        switch (tag) {
          case "left":
            results.push(this.alignLeft = true);
            break;
          case "right":
            results.push(this.alignRight = true);
            break;
          case "top":
            results.push(this.alignTop = true);
            break;
          case "bottom":
            results.push(this.alignBottom = true);
            break;
          default:
            results.push(void 0);
        }
      }
      return results;
    };

    GridManager.prototype.Center = function(turnOn) {
      if (turnOn == null) {
        turnOn = true;
      }
      return this.centered = turnOn;
    };

    GridManager.prototype.CenterVertical = function(turnOn) {
      if (turnOn == null) {
        turnOn = true;
      }
      return this.centerVertical = turnOn;
    };

    GridManager.prototype.Append = function(sprite) {
      sprite.Grid.parent = this.sprite;
      sprite.drawIndex = this.sprite.drawIndex + 1;
      return sprite.fixed = this.sprite.fixed;
    };

    GridManager.prototype.Parent = function() {
      return this.parent;
    };

    GridManager.prototype.Children = function(matcher) {
      var child, children, k, key, len, matching, ref, value;
      if (!matcher) {
        return this.children;
      }
      children = [];
      ref = this.children;
      for (k = 0, len = ref.length; k < len; k++) {
        child = ref[k];
        matching = true;
        for (key in matcher) {
          value = matcher[key];
          if (!child[key] === value) {
            matching = false;
          }
        }
        if (matching) {
          children.append(child);
        }
      }
      return children;
    };

    GridManager.prototype.Ancestors = function(matcher) {
      var ancestor, ancestors, key, matched, results, value;
      if (!this.parent) {
        return null;
      }
      ancestors = [];
      ancestor = this.parent;
      results = [];
      while (ancestor.Parent() !== null) {
        if (!matcher) {
          ancestors.push(ancestor);
        } else {
          matched = true;
          for (key in matcher) {
            value = matcher[key];
            if (ancestor[key] !== value) {
              matched = false;
            }
          }
          if (matched) {
            ancestors.push(ancestor);
          }
        }
        results.push(ancestor = ancestor.Parent());
      }
      return results;
    };

    GridManager.prototype.ApplyCentering = function(point) {
      if (this.centered) {
        point.x = (point.x + this.parent.rectangle.width / 2) - (this.sprite.rectangle.width / 2);
      }
      if (this.centerVertical) {
        point.y = (point.y + this.parent.rectangle.height / 2) - (this.sprite.rectangle.height / 2);
      }
      return point;
    };

    GridManager.prototype.ApplyAlignment = function(point) {
      if (this.alignLeft) {
        point.x = 0;
      }
      if (this.alignRight) {
        point.x = point.x + (this.parent.rectangle.width - this.sprite.rectangle.width);
      }
      if (this.alignTop) {
        point.y = 0;
      }
      if (this.alignBottom) {
        point.y = point.y + (this.parent.rectangle.height - this.sprite.rectangle.height);
      }
      return point;
    };

    GridManager.prototype.ResolveAbosolutePosition = function() {
      var basePoint;
      if (this.parent === null) {
        return this.sprite.position;
      }
      basePoint = this.parent.position.Clone();
      basePoint = this.ApplyCentering(basePoint);
      basePoint = this.ApplyAlignment(basePoint);
      basePoint.Apply(this.position);
      return basePoint;
    };

    GridManager.prototype.Update = function() {
      this.sprite.position = this.ResolveAbosolutePosition();
      if (this.parent !== null) {
        this.sprite.drawIndex = this.parent.drawIndex + 1;
        return this.sprite.fixed = this.parent.fixed;
      }
    };

    return GridManager;

  })();

  Animation = (function(superClass) {
    extend(Animation, superClass);

    function Animation() {
      return Animation.__super__.constructor.apply(this, arguments);
    }

    Animation.prototype.loop = false;

    Animation.prototype.stopped = false;

    Animation.prototype.intervalTime = 0;

    Animation.prototype.stepTime = 0;

    return Animation;

  })(Trashable);

  AnimationManager = (function() {
    AnimationManager.prototype.animations = null;

    function AnimationManager(sprite1) {
      this.sprite = sprite1;
      this.animations = [];
    }

    AnimationManager.prototype.Update = function() {
      var anim, cleanedAnims, k, len, ref;
      cleanedAnims = [];
      ref = this.animations;
      for (k = 0, len = ref.length; k < len; k++) {
        anim = ref[k];
        anim.Update();
        if (!anim.trash) {
          cleanedAnims.push(anim);
        }
      }
      return this.animations = cleanedAnims;
    };

    AnimationManager.prototype.SpriteSheet = function(width, height, numberOfFrames, config) {
      var anim;
      if (config == null) {
        config = {
          step: 200
        };
      }
      anim = new SpriteSheetAnimation(this.sprite, width, height, numberOfFrames, config.step);
      this.animations.push(anim);
      return anim;
    };

    return AnimationManager;

  })();

  SpriteSheetAnimation = (function(superClass) {
    extend(SpriteSheetAnimation, superClass);

    SpriteSheetAnimation.prototype.index = -1;

    SpriteSheetAnimation.prototype.clipX = 0;

    SpriteSheetAnimation.prototype.clipY = 0;

    SpriteSheetAnimation.prototype.game = null;

    SpriteSheetAnimation.prototype.clipWidth = null;

    SpriteSheetAnimation.prototype.clipHeight = null;

    SpriteSheetAnimation.prototype.numberOfFrames = null;

    SpriteSheetAnimation.prototype.stepTime = null;

    function SpriteSheetAnimation(sprite1, clipWidth1, clipHeight1, numberOfFrames1, stepTime) {
      this.sprite = sprite1;
      this.clipWidth = clipWidth1;
      this.clipHeight = clipHeight1;
      this.numberOfFrames = numberOfFrames1;
      this.stepTime = stepTime;
      this.loop = true;
      this.game = this.sprite.game;
      this.Reset();
    }

    SpriteSheetAnimation.prototype.Update = function() {
      if (this.stopped) {
        return;
      }
      this.intervalTime += this.game.Loop.updateDelta;
      if (this.intervalTime >= this.stepTime) {
        return this.AdvanceFrame();
      }
    };

    SpriteSheetAnimation.prototype.AdvanceFrame = function() {
      this.intervalTime = 0;
      this.index += 1;
      this.sprite.DrawTexture.drawParams.clipX = this.index * this.clipWidth;
      if (this.index >= this.numberOfFrames - 1) {
        if (this.loop) {
          return this.index = -1;
        } else {
          return this.Trash();
        }
      }
    };

    SpriteSheetAnimation.prototype.Stop = function() {
      return this.stopped = true;
    };

    SpriteSheetAnimation.prototype.Start = function() {
      return this.stopped = false;
    };

    SpriteSheetAnimation.prototype.Index = function(index) {
      this.index = index - 1;
      return this.sprite.DrawTexture.drawParams.clipX = (this.index + 1) * this.clipWidth;
    };

    SpriteSheetAnimation.prototype.Reset = function() {
      this.intervalTime = 0;
      this.index = -1;
      this.sprite.DrawTexture.drawParams.clipX = 0;
      this.sprite.DrawTexture.drawParams.clipY = 0;
      this.sprite.DrawTexture.drawParams.clipWidth = this.clipWidth;
      this.sprite.DrawTexture.drawParams.clipHeight = this.clipHeight;
      this.sprite.Size.width = this.clipWidth;
      return this.sprite.Size.height = this.clipHeight;
    };

    SpriteSheetAnimation.prototype.SyncFrame = function() {
      this.sprite.DrawTexture.drawParams.clipX = 0;
      this.sprite.DrawTexture.drawParams.clipY = 0;
      this.sprite.DrawTexture.drawParams.clipWidth = this.clipWidth;
      this.sprite.DrawTexture.drawParams.clipHeight = this.clipHeight;
      this.sprite.Size.width = this.clipWidth;
      return this.sprite.Size.height = this.clipHeight;
    };

    return SpriteSheetAnimation;

  })(Animation);

  Sprite = (function() {
    Sprite.MixIn(EventDispatcher).MixIn(Trashable);

    function Sprite(game, x, y) {
      this.InitSprite(game, x, y);
    }

    Sprite.prototype.InitSprite = function(game, x, y) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (game === null || game === void 0) {
        Torch.FatalError("Unable to initialize sprite without game");
      }
      this.InitEventDispatch();
      this.game = game;
      this.rectangle = new Rectangle(x, y, 0, 0);
      this.position = new Point(x, y);
      this.Bind = new Bind(this);
      this.Collisions = new CollisionManager(this);
      this.Body = new BodyManager(this);
      this.Size = new SizeManager(this);
      this.Events = new EventManager(this);
      this.Effects = new EffectManager(this);
      this.States = new StateMachineManager(this);
      this.Grid = new GridManager(this);
      this.Animations = new AnimationManager(this);
      this.DrawTexture = null;
      this.TexturePack = null;
      this.TextureSheet = null;
      this.TextureSimple = null;
      this.fixed = false;
      this.draw = true;
      this.drawIndex = 0;
      this.rotation = 0;
      this.opacity = 1;
      this._torch_add = "Sprite";
      this._torch_uid = "";
      this.events = {};
      this.renderer = new CanvasRenderer(this);
      return game.Add(this);
    };

    Sprite.prototype.UpdateSprite = function() {
      this.Body.Update();
      this.Size.Update();
      this.Events.Update();
      this.States.Update();
      this.Grid.Update();
      this.Animations.Update();
      this.rectangle.x = this.position.x;
      this.rectangle.y = this.position.y;
      return this.Collisions.Update();
    };

    Sprite.prototype.Update = function() {
      return this.UpdateSprite();
    };

    Sprite.prototype.Draw = function() {
      return this.renderer.Draw();
    };

    Sprite.prototype.GetCurrentDraw = function() {
      if (this.TexturePack) {
        return this.TexturePackAnimation.GetCurrentFrame();
      } else if (this.TextureSheet) {
        return this.TextureSheetAnimation.GetCurrentFrame();
      } else if (this.DrawTexture) {
        return this.DrawTexture;
      }
    };

    Sprite.prototype.Clone = function() {
      var args, proto;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      proto = this.constructor;
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(proto, args, function(){});
    };

    Sprite.prototype.NotSelf = function(otherSprite) {
      return otherSprite._torch_uid !== this._torch_uid;
    };

    Sprite.prototype.Center = function() {
      var width, x;
      width = this.game.canvasNode.width;
      x = (width / 2) - (this.rectangle.width / 2);
      this.position.x = x;
      return this;
    };

    Sprite.prototype.CenterVertical = function() {
      var height, y;
      height = this.game.canvasNode.height;
      y = (height / 2) - (this.rectangle.height / 2);
      this.position.y = y;
      return this;
    };

    Sprite.prototype.CollidesWith = function(otherSprite) {
      return new CollisionDetector(this, otherSprite);
    };

    return Sprite;

  })();


  /*
  gonna kill this...
   */

  GhostSprite = (function(superClass) {
    extend(GhostSprite, superClass);

    function GhostSprite() {
      return GhostSprite.__super__.constructor.apply(this, arguments);
    }

    GhostSprite.prototype.GHOST_SPRITE = true;

    return GhostSprite;

  })(Sprite);

  if (typeof document !== "undefined" && document !== null) {
    _measureCanvas = document.createElement("CANVAS");
    _measureCanvas.width = 500;
    _measureCanvas.height = 500;
  } else {
    _measureCanvas = {
      getContext: function() {}
    };
  }

  Text = (function(superClass) {
    extend(Text, superClass);

    Text.prototype.TEXT = true;

    Text.measureCanvas = _measureCanvas.getContext("2d");

    function Text(game, x, y, data) {
      this.InitText(game, x, y, data);
    }

    Text.prototype.InitText = function(game, x, y, data) {
      this.InitSprite(game, x, y);
      this.data = data;
      this.font = "Arial";
      this.fontSize = 16;
      this.fontWeight = "";
      this.color = "#2b4531";
      this.text = "";
      this.lastText = "";
      this.width = 100;
      this.height = 100;
      this.Size.scale = {
        width: 1,
        height: 1
      };
      return this.Init();
    };

    Text.prototype.Init = function() {
      if (this.data.font) {
        this.font = this.data.font;
      }
      if (this.data.fontSize) {
        this.fontSize = this.data.fontSize;
      }
      if (this.data.fontWeight) {
        this.fontWeight = this.data.fontWeight;
      }
      if (this.data.color) {
        this.color = this.data.color;
      }
      if (this.data.text) {
        this.text = this.data.text;
      }
      if (this.data.rectangle) {
        this.rectangle = this.data.rectangle;
      }
      if (this.data.buffHeight) {
        this.buffHeight = this.data.buffHeight;
      }
      return this.Render();
    };

    Text.prototype.Render = function() {
      var canvas, cnv, image;
      cnv = document.createElement("CANVAS");
      Text.measureCanvas.font = this.fontSize + "px " + this.font;
      cnv.width = Text.measureCanvas.measureText(this.text).width;
      cnv.height = this.fontSize;
      if (this.buffHeight) {
        cnv.height += this.buffHeight;
      }
      canvas = cnv.getContext("2d");
      canvas.fillStyle = this.color;
      canvas.font = this.fontWeight + " " + this.fontSize + "px " + this.font;
      canvas.fillText(this.text, 0, cnv.height);
      image = new Image();
      image.src = cnv.toDataURL();
      image.onload = (function(_this) {
        return function() {
          if (_this.GL) {
            if (_this.Three()) {
              _this.Three().Remove();
            }
            return _this.Bind.WebGLTexture({
              gl_2d_canvas_generated_image: true,
              width: image.width,
              height: image.height,
              texture: new THREE.TextureLoader().load(image.src)
            });
          } else {
            return _this.Bind.Texture(image);
          }
        };
      })(this);
      this.rectangle.width = cnv.width;
      return this.rectangle.height = this.fontSize;
    };

    Text.prototype.Update = function() {
      Text.__super__.Update.call(this);
      return this.UpdateText();
    };

    Text.prototype.UpdateText = function() {
      if (this.text !== this.lastText) {
        this.Render();
        return this.lastText = this.text;
      }
    };

    return Text;

  })(Sprite);

  SpriteGroup = (function() {
    function SpriteGroup(sprites1, game1) {
      var k, len, ref, sprite;
      this.sprites = sprites1 != null ? sprites1 : [];
      this.game = game1;
      ref = this.sprites;
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        sprite.anchorX = sprite.Rectangle.x;
      }
      return this;
    }

    SpriteGroup.prototype.Factory = function(spriteClass) {
      this.spriteFactory = spriteClass;
      return this;
    };

    SpriteGroup.prototype.Add = function() {
      var args, newSprite, sprites, x, y;
      sprites = arguments[0], x = arguments[1], y = arguments[2], args = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      if (sprites === null || sprites === void 0 && this.spriteFactory !== void 0) {
        newSprite = (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(this.spriteFactory, [this.game, x, y].concat(slice.call(args)), function(){});
        this.sprites.push(newSprite);
        return newSprite;
      } else {
        this.sprites = this.sprites.concat(sprites);
      }
      return this;
    };

    SpriteGroup.prototype.Trash = function() {
      var k, len, ref, sprite;
      ref = this.sprites;
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        sprite.Trash();
      }
      return this;
    };

    SpriteGroup.prototype.Shift = function(transition) {
      var k, len, ref, results, sprite;
      ref = this.sprites;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        if (transition.x) {
          results.push(sprite.Rectangle.x = sprite.anchorX + transition.x);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    SpriteGroup.prototype.Hide = function() {
      var k, len, ref, sprite;
      ref = this.sprites;
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        sprite.draw = false;
      }
      return this;
    };

    SpriteGroup.prototype.Show = function() {
      var k, len, ref, sprite;
      ref = this.sprites;
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        sprite.draw = true;
      }
      return this;
    };

    SpriteGroup.prototype.Center = function() {
      var k, len, ref, sprite;
      ref = this.sprites;
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        sprite.Center();
      }
      return this;
    };

    SpriteGroup.prototype.ToggleFixed = function() {
      var k, len, ref, sprite;
      ref = this.sprites;
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        sprite.ToggleFixed();
      }
      return this;
    };

    return SpriteGroup;

  })();

  SpriteGrid = (function() {
    function SpriteGrid(game1, gridXml) {
      this.game = game1;
      this.gridXml = gridXml;
      this.ParseXml();
    }

    SpriteGrid.prototype.ParseXml = function() {
      var parser, root, sprites, xmlDoc;
      parser = new DOMParser();
      xmlDoc = parser.parseFromString(this.gridXml, "text/xml");
      root = xmlDoc.getElementsByTagName("SpriteGrid")[0];
      if (root === null) {
        this.game.FatalError("Unable to parse SpriteGrid XML, no SpriteGrid tag");
      }
      return sprites = root.getElementsByTagName("Sprite");
    };

    return SpriteGrid;

  })();

  CollisionDetector = (function() {
    function CollisionDetector(sprite1, otherSprite1) {
      this.sprite = sprite1;
      this.otherSprite = otherSprite1;
    }

    CollisionDetector.prototype.AABB = function() {
      return new AABB(this.sprite, this.otherSprite).Execute();
    };

    CollisionDetector.prototype.Circle = function() {
      return new Circle(this.sprite, this.otherSprite).Execute();
    };

    CollisionDetector.prototype.SAT = function() {
      return new SAT(this.sprite, this.otherSprite).Execute();
    };

    return CollisionDetector;

  })();

  AABB = (function() {
    function AABB(sprite1, otherSprite1) {
      this.sprite = sprite1;
      this.otherSprite = otherSprite1;
    }

    AABB.prototype.Execute = function() {
      return this.sprite.rectangle.Intersects(this.otherSprite.rectangle);
    };

    return AABB;

  })();

  Circle = (function() {
    function Circle(sprite1, otherSprite1) {
      this.sprite = sprite1;
      this.otherSprite = otherSprite1;
    }

    Circle.prototype.Execute = function() {
      var circle1, circle2, distance, dx, dy;
      circle1 = {
        radius: this.sprite.Width(),
        x: this.sprite.Position("x"),
        y: this.sprite.Position("y")
      };
      circle2 = {
        radius: this.otherSprite.Width(),
        x: this.otherSprite.Position("x"),
        y: this.otherSprite.Position("y")
      };
      dx = circle1.x - circle2.x;
      dy = circle1.y - circle2.y;
      distance = Math.sqrt(dx * dx + dy * dy);
      if (distance < circle1.radius + circle2.radius) {
        return true;
      }
      return false;
    };

    return Circle;

  })();

  Collision = {
    AABB: 1,
    Circle: 2,
    SAT: 3
  };

  CollisionManager = (function() {
    CollisionManager.prototype.mode = Collision.AABB;

    CollisionManager.prototype.sprite = null;

    CollisionManager.prototype.filter = null;

    CollisionManager.prototype.limit = null;

    CollisionManager.prototype.enabled = false;

    function CollisionManager(sprite1) {
      this.sprite = sprite1;
      this.filter = {};
      this.game = this.sprite.game;
    }

    CollisionManager.prototype.Monitor = function() {
      return this.enabled = true;
    };

    CollisionManager.prototype.NotFiltered = function(sprite) {
      var key, ref, ref1, value;
      ref = this.game.filter;
      for (key in ref) {
        value = ref[key];
        if (key === "__type__") {
          if (value.constructor.name === sprite.constructor.name) {
            return false;
          }
        } else {
          if (value === sprite[key]) {
            return false;
          }
        }
      }
      ref1 = this.filter;
      for (key in ref1) {
        value = ref1[key];
        if (key === "__type__") {
          if (value.constructor.name === sprite.constructor.name) {
            return false;
          }
        } else {
          if (value === sprite[key]) {
            return false;
          }
        }
      }
      return true;
    };

    CollisionManager.prototype.InLimit = function(sprite) {
      var key, ref, value;
      ref = this.limit;
      for (key in ref) {
        value = ref[key];
        if (key === "__type__") {
          if (value.constructor.name === sprite.constructor.name) {
            return true;
          }
        } else {
          if (value === sprite[key]) {
            return true;
          }
        }
      }
      return false;
    };

    CollisionManager.prototype.Valid = function(sprite) {
      if (this.limit !== null) {
        return this.InLimit(sprite);
      }
      return this.NotFiltered(sprite);
    };

    CollisionManager.prototype.Filter = function(_filter) {
      return this.filter = _filter;
    };

    CollisionManager.prototype.Limit = function(_limit) {
      return this.limit = _limit;
    };

    CollisionManager.prototype.Mode = function(_mode) {
      var mode;
      return mode = _mode;
    };

    CollisionManager.prototype.Update = function() {
      var anyCollisions, collisionData, collisionDetected, k, len, otherSprite, ref;
      if (!this.sprite.game || !this.enabled) {
        return;
      }
      this.game = this.sprite.game;
      anyCollisions = false;
      ref = this.game.spriteList;
      for (k = 0, len = ref.length; k < len; k++) {
        otherSprite = ref[k];
        if (this.sprite.NotSelf(otherSprite) && this.Valid(otherSprite)) {
          collisionDetected = false;
          collisionData = {};
          switch (this.mode) {
            case Collision.AABB:
              collisionData = this.sprite.CollidesWith(otherSprite).AABB();
              collisionDetected = collisionData !== false;
          }
          if (collisionDetected) {
            collisionData.self = this.sprite;
            collisionData.collider = otherSprite;
            anyCollisions === true;
            this.sprite.Emit("Collision", new Torch.Event(this.game, {
              collisionData: collisionData
            }));
          }
        }
      }
      return this.sprite.Emit("NoCollision", new Torch.Event(this.game, {}));
    };

    CollisionManager.prototype.SimpleCollisionHandle = function(event, sink) {
      var offset, touching;
      if (sink == null) {
        sink = 1;
      }
      offset = event.collisionData;
      touching = {
        left: false,
        right: false,
        top: false,
        bottom: false
      };
      if (offset.vx < offset.halfWidths && offset.vy < offset.halfHeights) {
        if (offset.x < offset.y) {
          if (offset.vx > 0) {
            event.collisionData.self.position.x += offset.x * sink;
            touching.left = true;
          } else if (offset.vx < 0) {
            event.collisionData.self.position.x -= offset.x * sink;
            touching.right = true;
          }
        } else if (offset.x > offset.y) {
          if (offset.vy > 0) {
            event.collisionData.self.position.y += offset.y * sink;
            touching.top = true;
          } else if (offset.vy < 0) {
            event.collisionData.self.position.y -= offset.y * sink;
            touching.bottom = true;
          }
        }
      }
      return touching;
    };

    return CollisionManager;

  })();

  Loop = (function() {
    function Loop(game1) {
      this.game = game1;
      this.fps = 50;
      this.frameTime = 1000 / this.fps;
      this.lag = 0;
      this.updateDelta = 0;
      this.drawDelta = 0;
      this.lagOffset;
    }

    Loop.prototype.Update = function() {
      this.game.update(this);
      this.game.Camera.Update();
      this.game.Timer.Update();
      this.game.Debug.Update();
      this.game.Tweens.Update();
      this.game.UpdateAnimations();
      this.game.UpdateTimeInfo();
      this.game.UpdateTasks();
      this.game.UpdateGamePads();
      return this.game.UpdateSprites();
    };

    Loop.prototype.Draw = function() {
      this.game.draw(this);
      return this.game.DrawSprites();
    };

    Loop.prototype.AdvanceFrame = function(timestamp) {
      var elapsed;
      if (this.game.time === void 0) {
        this.game.time = timestamp;
      }
      this.game.deltaTime = Math.round(timestamp - this.game.time);
      this.game.time = timestamp;
      elapsed = this.game.deltaTime;
      this.drawDelta = elapsed;
      this.updateDelta = this.frameTime;
      if (elapsed > 1000) {
        elapsed = this.frameTime;
      }
      this.lag += elapsed;
      while (this.lag >= this.frameTime) {
        this.Update();
        this.lag -= this.frameTime;
      }
      this.lagOffset = this.lag / this.frameTime;
      this.Draw();
      return window.requestAnimationFrame((function(_this) {
        return function(timestamp) {
          return _this.AdvanceFrame(timestamp);
        };
      })(this));
    };

    Loop.prototype.Run = function(timestamp) {
      return this.AdvanceFrame(0);
    };

    return Loop;

  })();

  Load = (function() {
    function Load(game1) {
      this.game = game1;
      this.game.Assets = {
        game: this.game,
        GetTexture: function(id) {
          return this.game.Assets.Textures[id];
        },
        GetTexturePack: function(id) {
          return this.game.Assets.TexturePacks[id];
        },
        GetTextureSheet: function(id) {
          return this.game.Assets.TextureSheets[id];
        },
        GetSound: function(id) {
          return this.game.Assets.Sounds[id].audio;
        }
      };
      this.game.Files = {};
      this.textures = this.game.Assets.Textures = {};
      this.texturePacks = this.game.Assets.TexturePacks = {};
      this.textureSheets = this.game.Assets.TextureSheets = {};
      this.sound = this.game.Assets.Sounds = {};
      this.audio = this.game.Assets.Audio = {};
      this.Stack = [];
      this.finish_stack = 0;
      this.progress = 0;
      this.loaded = false;
      this.loadLog = "";
    }

    Load.prototype.Sound = function(path, id) {
      if (this.sound[id]) {
        Torch.Error("Asset ID '" + id + "' already exists");
      }
      this.Stack.push({
        _torch_asset: "sound",
        id: id,
        path: path
      });
      return this.finish_stack++;
    };

    Load.prototype.Audio = function(path, id) {
      if (this.audio[id]) {
        Torch.Error("Asset ID '" + id + "' already exists");
      }
      this.Stack.push({
        _torch_asset: "audio",
        id: id,
        path: path
      });
      return this.finish_stack++;
    };

    Load.prototype.Texture = function(path, id) {
      var i, k, len, p, results;
      if (typeof path === "string") {
        this.Stack.push({
          _torch_asset: "texture",
          id: id,
          path: path
        });
        return this.finish_stack++;
      } else {
        results = [];
        for (i = k = 0, len = path.length; k < len; i = ++k) {
          p = path[i];
          results.push(this.Texture(path[i][0], path[i][1]));
        }
        return results;
      }
    };

    Load.prototype.PixlTexture = function(pattern, pallette, id) {
      var imSrc;
      imSrc = pixl(pattern, pallette).src;
      return this.Stack.push({
        _torch_asset: "texture",
        id: id,
        path: imSrc
      });
    };

    Load.prototype.TexturePack = function(path, id, range, fileType) {
      var i, pack, packId, packPath;
      pack = [];
      i = 1;
      while (i <= range) {
        packPath = path + "_" + i.toString() + "." + fileType;
        packId = id + "_" + i.toString();
        this.Stack.push({
          _torch_asset: "texture",
          id: packId,
          path: packPath
        });
        pack.push(packId);
        this.finish_stack++;
        i++;
      }
      return this.texturePacks[id] = pack;
    };

    Load.prototype.TextureSheet = function(path, id, totalWidth, totalHeight, clipWidth, clipHeight) {
      var columns, i, j, rows, sheet, sheetClip;
      totalWidth += clipWidth;
      rows = totalHeight / clipHeight;
      columns = totalWidth / clipWidth;
      sheet = [];
      this.Stack.push({
        _torch_asset: "texture",
        id: id,
        path: path
      });
      i = j = 0;
      while (i < columns) {
        while (j < rows) {
          sheetClip = {
            clipX: i * clipWidth,
            clipY: j * clipHeight,
            clipWidth: clipWidth,
            clipHeight: clipHeight
          };
          sheet.push(sheetClip);
          j++;
        }
        i++;
      }
      return this.textureSheets[id] = sheet;
    };

    Load.prototype.File = function(path, id) {
      this.finish_stack++;
      return this.Stack.push({
        _torch_asset: "file",
        id: id,
        path: path
      });
    };

    Load.prototype.LoadItemFinished = function() {
      var timeToLoad;
      this.finish_stack--;
      this.progress = (this.totalLoad - this.finish_stack) / this.totalLoad;
      this.game.Emit("LoadProgressed", new Torch.Event(this.game, {
        progress: this.progress
      }));
      if (this.finish_stack <= 0) {
        document.getElementsByClassName("font-loader")[0].remove();
        this.loadFinished();
        timeToLoad = (new Date().getTime() - this.startTime) / 1000;
        return console.log("%c" + this.game.name + " loaded in " + timeToLoad + "s", "background-color:green; color:white; padding:2px;padding-right:5px;padding-left:5px");
      }
    };

    Load.prototype.Load = function(finishFunction) {
      var aud, e, im, k, len, loader, ref, results, stackItem;
      this.loadFinished = finishFunction;
      this.totalLoad = this.finish_stack;
      this.startTime = new Date().getTime();
      try {
        ref = this.Stack;
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          stackItem = ref[k];
          switch (stackItem._torch_asset) {
            case "texture":
              im = new Image();
              im.src = stackItem.path;
              stackItem.image = im;
              this.textures[stackItem.id] = stackItem;
              im.refId = stackItem.id;
              im.stackItem = stackItem;
              im.loader = this;
              results.push(im.onload = function() {
                this.loader.textures[this.stackItem.id].width = this.width;
                this.loader.textures[this.stackItem.id].height = this.height;
                return this.loader.LoadItemFinished();
              });
              break;
            case "sound":
              aud = new Audio();
              aud.src = stackItem.path;
              stackItem.audio = aud;
              this.sound[stackItem.id] = stackItem;
              this.LoadItemFinished();
              results.push(aud.toggle = function() {
                this.currentTime = 0;
                return this.play();
              });
              break;
            case "audio":
              loader = new Torch.AjaxLoader(stackItem.path, Torch.AjaxData.ArrayBuffer);
              loader.stackItem = stackItem;
              loader.Finish((function(_this) {
                return function(data, loader) {
                  _this.audio[loader.stackItem.id] = {};
                  _this.audio[loader.stackItem.id].encodedAudioData = data;
                  return _this.game.Audio.DecodeAudioData(data, function(buffer) {
                    _this.audio[loader.stackItem.id].audioData = buffer;
                    return _this.LoadItemFinished();
                  });
                };
              })(this));
              results.push(loader.Load());
              break;
            case "file":
              if (!Torch.ELECTRON) {
                loader = new Torch.AjaxLoader(stackItem.path, Torch.AjaxData.Text);
                loader.stackItem = stackItem;
                loader.Finish((function(_this) {
                  return function(data, loader) {
                    _this.LoadItemFinished();
                    return _this.game.Files[loader.stackItem.id] = data;
                  };
                })(this));
                results.push(loader.Load());
              } else {
                results.push(Torch.fs.readFile(stackItem.path, 'utf8', (function(_this) {
                  return function(er, data) {
                    _this.LoadItemFinished();
                    if (er) {
                      return _this.game.FatalError(new Error("Torch.Load.File file '{0}' could not be loaded".format(stackItem.path)));
                    } else {
                      return _this.game.Files[stackItem.id] = data;
                    }
                  };
                })(this)));
              }
              break;
            default:
              results.push(void 0);
          }
        }
        return results;
      } catch (error1) {
        e = error1;
        console.log("%c" + this.game.name + " could not load!", "background-color:" + Color.Ruby + "; color:white; padding:2px;padding-right:5px;padding-left:5px");
        return Torch.FatalError(e);
      }
    };

    return Load;

  })();

  Timer = (function() {
    function Timer(game1) {
      this.game = game1;
      this.futureEvents = [];
    }

    Timer.prototype.Update = function() {
      var event, k, len, ref, results;
      ref = this.futureEvents;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        event = ref[k];
        results.push(event.Update());
      }
      return results;
    };

    Timer.prototype.SetFutureEvent = function(timeToOccur, handle) {
      return this.futureEvents.push(new FutureEvent(timeToOccur, handle, this.game));
    };

    return Timer;

  })();

  FutureEvent = (function() {
    function FutureEvent(timeToOccur1, handle1, game1) {
      this.timeToOccur = timeToOccur1;
      this.handle = handle1;
      this.game = game1;
      this.time = 0;
    }

    FutureEvent.prototype.Update = function() {
      this.time += this.game.deltaTime;
      if (this.time >= this.timeToOccur) {
        if (this.handle !== null && this.handle !== void 0) {
          this.handle();
          return this.handle = null;
        }
      }
    };

    return FutureEvent;

  })();

  Mouse = (function() {
    function Mouse(game1) {
      this.game = game1;
      this.x = 0;
      this.y = 0;
      this.down = false;
    }

    Mouse.prototype.SetMousePos = function(c, evt) {
      var rect;
      rect = c.getBoundingClientRect();
      this.x = evt.clientX - rect.left;
      return this.y = evt.clientY - rect.top;
    };

    Mouse.prototype.GetRectangle = function() {
      return new Rectangle(this.x, this.y, 5, 5);
    };

    return Mouse;

  })();

  Camera = (function() {
    Camera.prototype.position = null;

    Camera.prototype._jerkFollow = null;

    function Camera(game1) {
      this.game = game1;
      this.position = new Point(0, 0);
      this.Viewport = new Viewport(this);
    }

    Camera.prototype.JerkFollow = function(sprite, offset, config) {
      if (offset == null) {
        offset = 5;
      }
      if (config == null) {
        config = {
          maxLeft: -500,
          maxRight: 2000,
          maxTop: -500,
          maxBottom: 2000
        };
      }
      return this._jerkFollow = new JerkFollow(this, sprite, offset, config);
    };

    Camera.prototype.Update = function() {
      this.Viewport.Update();
      if (this._jerkFollow != null) {
        return this._jerkFollow.Update();
      }
    };

    return Camera;

  })();

  Viewport = (function() {
    Viewport.prototype.width = 0;

    Viewport.prototype.height = 0;

    Viewport.prototype.maxWidth = 0;

    Viewport.prototype.maxHeight = 0;

    function Viewport(camera) {
      this.camera = camera;
      this.maxWidth = this.width = window.innerWidth;
      this.maxHeight = this.height = window.innerHeight;
      this.rectangle = new Rectangle(this.camera.position.x, this.camera.position.y, this.width, this.height);
    }

    Viewport.prototype.Update = function() {
      this.rectangle.x = this.camera.position.x;
      this.rectangle.y = this.camera.position.y;
      this.rectangle.width = this.width;
      return this.rectangle.height = this.height;
    };

    return Viewport;

  })();

  JerkFollow = (function() {
    JerkFollow.prototype.boundLeft = 0;

    JerkFollow.prototype.boundRight = 0;

    JerkFollow.prototype.boundTop = 0;

    JerkFollow.prototype.boundBottom = 0;

    JerkFollow.prototype.Inc = 0;

    function JerkFollow(camera, sprite1, offset, config1) {
      var v;
      this.camera = camera;
      this.sprite = sprite1;
      this.config = config1;
      v = this.camera.Viewport;
      this.game = this.camera.game;
      this.Inc = v.width / offset;
      this.boundLeft = v.width / offset;
      this.boundRight = v.width - this.boundLeft;
      this.boundTop = 0;
    }

    JerkFollow.prototype.Update = function() {
      if (this.sprite.position.x >= this.boundRight) {
        if (this.sprite.position.x >= this.config.maxRight) {
          this.sprite.position.x = this.boundRight;
          return;
        }
        this.boundRight += this.Inc;
        this.boundLeft += this.Inc;
        this.game.Tweens.Tween(this.camera.position, 500, Torch.Easing.Smooth).To({
          x: this.camera.position.x - this.Inc
        });
      }
      if (this.sprite.position.x <= this.boundLeft) {
        if (this.sprite.position.x <= this.config.maxLeft) {
          this.sprite.position.x = this.boundLeft;
          return;
        }
        this.boundRight -= this.Inc;
        this.boundLeft -= this.Inc;
        this.game.Tweens.Tween(this.camera.position, 500, Torch.Easing.Smooth).To({
          x: this.camera.position.x + this.Inc
        });
      }
      if (this.sprite.position.y <= this.boundTop) {
        if (this.sprite.position.y <= this.config.maxTop) {
          this.sprite.position.y = this.boundTop;
          return;
        }
        this.boundTop -= this.Inc;
        this.boundBottom -= this.Inc;
        return this.game.Tweens.Tween(this.camera.position, 500, Torch.Easing.Smooth).To({
          x: this.camera.position.y + this.Inc
        });
      }
    };

    return JerkFollow;

  })();

  Layer = (function() {
    function Layer(drawIndex) {
      this.drawIndex = drawIndex;
      this.children = [];
      this.mapIndex - this.drawIndex;
    }

    Layer.prototype.DrawIndex = function(index) {
      var child, k, len, ref;
      if (!index) {
        return this.drawIndex;
      }
      this.drawIndex = index;
      ref = this.children;
      for (k = 0, len = ref.length; k < len; k++) {
        child = ref[k];
        child.DrawIndex(index);
      }
      return this;
    };

    Layer.prototype.Add = function(child) {
      child.DrawIndex(this.index);
      return this.children.push(child);
    };

    return Layer;

  })();

  Layers = (function() {
    function Layers(game1) {
      this.game = game1;
      this.layers = [];
      this.layerMap = {};
    }

    Layers.prototype.Add = function(layerName) {
      var k, layer, len, name, results;
      layer = null;
      if (typeof layerName === "string") {
        layer = new Layer(this.layers.length);
        this.layerName[layerName] = layer;
        return this.layers.add(layer);
      } else {
        results = [];
        for (k = 0, len = layerName.length; k < len; k++) {
          name = layerName[k];
          layer = new Layer(this.layers.length);
          this.layerMap[name] = layer;
          results.push(this.layers.add(layer));
        }
        return results;
      }
    };

    Layers.prototype.Remove = function(layerName, tryToFill) {
      var cleanedLayers, index, item, k, l, layer, len, ref, results;
      if (!this.layerMap[layerName]) {
        return Torch.FatalError("Unable to remove layer '" + layerName + "'. Layer does not exist");
      } else {
        cleanedLayers = [];
        layer = layerMap[layerName];
        layer.Trash();
        delete this.layerMap[layerName];
        ref = this.layers;
        results = [];
        for (index = k = 0, len = ref.length; k < len; index = ++k) {
          item = ref[index];
          l = cleanedLayers[index];
          if (index !== layer.mapIndex) {
            cleanedLayers.push(l);
            if (tryToFill) {
              results.push(l.DrawIndex(l.DrawIndex() - 1));
            } else {
              results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    Layers.prototype.Get = function(layerName) {
      if (!this.layerMap[layerName]) {
        return Torch.FatalError("Unable to get layer '" + layerName + "'. Layer does not exist");
      } else {
        return this.layerMap[layerName];
      }
    };

    return Layers;

  })();

  Style = function() {
    var body, canvas;
    body = document.body;
    body.style.backgroundColor = "black";
    body.style.overflow = "hidden";
    canvas = document.getElementsByTagName("CANVAS")[0];
    canvas.style.border = "1px solid orange";
    return canvas.style.cursor = "pointer";
  };

  Debug = (function() {
    function Debug(game1) {
      this.game = game1;
      this.text = "";
      this.CreateHtmlDisplay();
    }

    Debug.prototype.CreateHtmlDisplay = function() {
      var display;
      display = document.createElement("DIV");
      display.style.position = "absolute";
      display.style.display = "block";
      display.style.color = "white";
      display.style.font = "monospace";
      display.style.top = 0;
      document.body.appendChild(display);
      return this.display = display;
    };

    Debug.prototype.Update = function() {};

    return Debug;

  })();

  Key = (function() {
    Key.MixIn(EventDispatcher);

    Key.prototype.down = false;

    function Key(keyCode1) {
      this.keyCode = keyCode1;
      this.InitEventDispatch();
    }

    return Key;

  })();

  Keys = (function() {
    Keys.MixIn(EventDispatcher);

    function Keys() {
      this.specialKeys = {
        8: "Delete",
        9: "Tab",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "PauseBreak",
        20: "CapsLock",
        27: "Escape",
        32: "Space",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "LeftArrow",
        38: "UpArrow",
        39: "RightArrow",
        40: "DownArrow",
        45: "Insert",
        46: "Delete2",
        48: "Num0",
        49: "Num1",
        50: "Num2",
        51: "Num3",
        52: "Num4",
        53: "Num5",
        54: "Num6",
        55: "Num7",
        56: "Num8",
        57: "Num9",
        96: "NumPad0",
        97: "NumPad1",
        98: "NumPad2",
        99: "NumPad3",
        100: "NumPad4",
        101: "NumPad5",
        102: "NumPad6",
        103: "NumPad7",
        104: "NumPad8",
        105: "NumPad9",
        106: "NumPadMultiply",
        107: "NumPadPlus",
        109: "NumPadMinus",
        110: "NumPadPeriod",
        111: "NumPadDivide",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        186: "Colon",
        187: "NumPlus",
        188: "Comma",
        189: "NumMinus",
        190: "Period",
        191: "ForwardSlash",
        192: "Tilda",
        219: "BracketLeft",
        221: "BracketRight",
        220: "BackSlash",
        222: "Quote"
      };
      this.InitKeys();
    }

    Keys.prototype.SpecialKey = function(keyCode) {
      var key, ref, value;
      ref = this.specialKeys;
      for (key in ref) {
        value = ref[key];
        if (keyCode.toString() === key.toString()) {
          return this[value];
        }
      }
      return null;
    };

    Keys.prototype.InitKeys = function() {
      var _char, _keys, i, keyCode, ref, results, value;
      _keys = this;
      i = 0;
      while (i < 230) {
        _char = String.fromCharCode(i).toUpperCase();
        _keys[_char] = new Key(i);
        i++;
      }
      ref = this.specialKeys;
      results = [];
      for (keyCode in ref) {
        value = ref[keyCode];
        results.push(_keys[value] = new Key(keyCode));
      }
      return results;
    };

    return Keys;

  })();

  Tween = (function() {
    Tween.MixIn(Trashable);

    Tween.MixIn(EventDispatcher);

    Tween.prototype.objectToTween = null;

    Tween.prototype.tweenProperties = null;

    Tween.prototype.originalObjectValues = null;

    Tween.prototype.elapsedTime = 0;

    Tween.prototype.timeTweenShouldTake = 0;

    Tween.prototype.easing = null;

    function Tween(game1, objectToTween, tweenProperties1, timeTweenShouldTake1, easing) {
      var key, ref, value;
      this.game = game1;
      this.objectToTween = objectToTween;
      this.tweenProperties = tweenProperties1;
      this.timeTweenShouldTake = timeTweenShouldTake1;
      this.easing = easing;
      this.InitEventDispatch();
      this.game.Tweens.tweens.push(this);
      this.originalObjectValues = {};
      ref = this.tweenProperties;
      for (key in ref) {
        value = ref[key];
        this.originalObjectValues[key] = this.objectToTween[key];
      }
    }

    Tween.prototype.Update = function() {
      var easedTime, key, normalizedTime, ref, value;
      normalizedTime = this.elapsedTime / this.timeTweenShouldTake;
      easedTime = this.Ease(normalizedTime);
      ref = this.tweenProperties;
      for (key in ref) {
        value = ref[key];
        this.objectToTween[key] = (this.tweenProperties[key] * easedTime) + (this.originalObjectValues[key] * (1 - easedTime));
      }
      this.elapsedTime += this.game.Loop.updateDelta;
      if (this.elapsedTime >= this.timeTweenShouldTake) {
        this.Emit("Finish", new Torch.Event(this.game, {
          tween: this
        }));
        return this.Trash();
      }
    };

    Tween.prototype.Ease = function(normalizedTime) {
      switch (this.easing) {
        case Torch.Easing.Linear:
          return normalizedTime;
        case Torch.Easing.Square:
          return Math.pow(normalizedTime, 2);
        case Torch.Easing.Cube:
          return Math.pow(normalizedTime, 3);
        case Torch.Easing.InverseSquare:
          return 1 - Math.pow(1 - normalizedTime, 2);
        case Torch.Easing.InverseCube:
          return 1 - Math.pow(1 - normalizedTime, 3);
        case Torch.Easing.Smooth:
          return normalizedTime * normalizedTime * (3 - 2 * normalizedTime);
        case Torch.Easing.SmoothSquare:
          return Math.pow(normalizedTime * normalizedTime * (3 - 2 * normalizedTime), 2);
        case Torch.Easing.SmoothCube:
          return Math.pow(normalizedTime * normalizedTime * (3 - 2 * normalizedTime), 3);
        case Torch.Easing.Sine:
          return Math.sin(normalizedTime * Math.PI / 2);
        case Torch.Easing.InverseSine:
          return 1 - Math.sin((1 - normalizedTime) * Math.PI / 2);
      }
    };

    return Tween;

  })();

  TweenSetup = (function() {
    function TweenSetup(game1, object1, timeTweenShouldTake1, easing) {
      this.game = game1;
      this.object = object1;
      this.timeTweenShouldTake = timeTweenShouldTake1;
      this.easing = easing != null ? easing : Torch.Easing.Smooth;
    }

    TweenSetup.prototype.To = function(tweenProperties) {
      return new Tween(this.game, this.object, tweenProperties, this.timeTweenShouldTake, this.easing);
    };

    TweenSetup.prototype.From = function(setProperties) {
      var key, value;
      for (key in setProperties) {
        value = setProperties[key];
        this.object[key] = value;
      }
      return this;
    };

    return TweenSetup;

  })();

  TweenManager = (function() {
    function TweenManager(game1) {
      this.game = game1;
      this.tweens = [];
    }

    TweenManager.prototype.Update = function() {
      var cleanedTweens, k, len, ref, results, tween;
      cleanedTweens = [];
      ref = this.tweens;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        tween = ref[k];
        if (!tween.trash) {
          cleanedTweens.push(tween);
          results.push(tween.Update());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    TweenManager.prototype.Tween = function(object, timeTweenShouldTake) {
      return new TweenSetup(this.game, object, timeTweenShouldTake);
    };

    TweenManager.prototype.All = function(callback) {
      var k, len, ref, results, tween;
      ref = this.game.tweens;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        tween = ref[k];
        results.push(callback(tween));
      }
      return results;
    };

    return TweenManager;

  })();

  ParticleEmitter = (function(superClass) {
    extend(ParticleEmitter, superClass);

    ParticleEmitter.prototype.particle = null;

    ParticleEmitter.prototype.auto = true;

    function ParticleEmitter(game1, x, y, interval1, loop, particle1, config1) {
      this.game = game1;
      this.interval = interval1;
      this.loop = loop;
      this.particle = particle1;
      this.config = config1;
      this.InitSprite(this.game, x, y);
      this.elapsedTime = 0;
      this.hasEmitted = false;
    }

    ParticleEmitter.prototype.Update = function() {
      ParticleEmitter.__super__.Update.call(this);
      if (this.interval !== void 0) {
        if (this.hasEmitted) {
          if (this.loop) {
            return this.UpdateParticleEmitter();
          }
        } else {
          return this.UpdateParticleEmitter();
        }
      }
    };

    ParticleEmitter.prototype.Particle = function(particle) {
      return particle = particle;
    };

    ParticleEmitter.prototype.UpdateParticleEmitter = function() {
      if (!this.auto) {
        return;
      }
      this.elapsedTime += this.game.Loop.updateDelta;
      if (this.elapsedTime >= this.interval) {
        this.EmitParticles();
        this.hasEmitted = true;
        return this.elapsedTime = 0;
      }
    };

    ParticleEmitter.prototype.EmitParticles = function(removeEmitterWhenDone) {
      var i;
      if (removeEmitterWhenDone == null) {
        removeEmitterWhenDone = false;
      }
      i = 0;
      while (i < this.config.spread) {
        i++;
        this.EmitParticle();
      }
      if (removeEmitterWhenDone) {
        return this.Trash();
      }
    };

    ParticleEmitter.prototype.EmitParticle = function() {
      var alphaDecay, angle, p, radius, scale, x, y;
      angle = Torch.Util.Math().RandomInRange(this.config.minAngle, this.config.maxAngle);
      scale = Torch.Util.Math().RandomInRange(this.config.minScale, this.config.maxScale);
      alphaDecay = Torch.Util.Math().RandomInRange(this.config.minAlphaDecay, this.config.maxAlphaDecay);
      radius = Torch.Util.Math().RandomInRange(this.config.minRadius, this.config.maxRadius);
      x = this.position.x;
      y = this.position.y;
      if (typeof this.particle !== "string") {
        p = new this.particle(this.game, x, y);
      } else {
        p = new Sprite(this.game, x, y);
        p.Bind.Texture(this.particle);
      }
      p.Body.velocity.x = Math.cos(angle) * Torch.Util.Math().RandomInRange(this.config.minVelocity, this.config.maxVelocity);
      p.Body.velocity.y = Math.sin(angle) * Torch.Util.Math().RandomInRange(this.config.minVelocity, this.config.maxVelocity);
      p.Body.omega = Torch.Util.Math().RandomInRange(this.config.minOmega, this.config.maxOmega);
      p.Size.scale.width = scale;
      p.Size.scale.height = scale;
      p.drawIndex = 1000;
      return this.game.Tweens.Tween(p, alphaDecay, Torch.Easing.Smooth).To({
        opacity: 0
      }).On("Finish", function() {
        return p.Trash();
      });
    };

    return ParticleEmitter;

  })(Sprite);

  ParticleManager = (function() {
    function ParticleManager(game1) {
      this.game = game1;
    }

    ParticleManager.prototype.ParticleEmitter = function(x, y, interval, shouldLoop, particle, config) {
      return new ParticleEmitter(this.game, x, y, interval, shouldLoop, particle, config);
    };

    return ParticleManager;

  })();

  Sound = (function() {
    Sound.prototype.volume = 1;

    Sound.prototype.pan = 0;

    function Sound(soundId1) {
      this.soundId = soundId1;
    }

    return Sound;

  })();

  Audio = (function() {
    Audio.prototype.audioContext = null;

    Audio.prototype.MasterVolume = 1;

    function Audio(game1) {
      this.game = game1;
      this.GetAudioContext();
    }

    Audio.prototype.GetAudioContext = function() {
      var e;
      try {
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        return this.audioContext = new AudioContext();
      } catch (error1) {
        e = error1;
        return console.warn("Unable to initialize audio...");
      }
    };

    Audio.prototype.DecodeAudioData = function(data, callback) {
      return this.audioContext.decodeAudioData(data, function(buffer) {
        return callback(buffer);
      });
    };

    Audio.prototype.CreateAudioPlayer = function() {
      return new AudioPlayer(this);
    };

    return Audio;

  })();

  AudioPlayer = (function() {
    AudioPlayer.prototype.volume = 1;

    function AudioPlayer(aud) {
      this.audioContext = aud.audioContext;
      this.game = aud.game;
    }

    AudioPlayer.prototype.CreateGain = function(gain) {
      var gainNode;
      if (gain == null) {
        gain = 1;
      }
      gainNode = this.audioContext.createGain();
      gainNode.gain.value = gain;
      return gainNode;
    };

    AudioPlayer.prototype.Play = function(sound) {
      return this.game.FatalError("Cannot play sound. sound must be Torch.Sound");
    };

    AudioPlayer.prototype.PlaySound = function(id, time, filters) {
      var filter, index, k, lastFilter, len, source;
      if (time == null) {
        time = 0;
      }
      if (filters == null) {
        filters = null;
      }
      source = this.audioContext.createBufferSource();
      source.buffer = this.game.Assets.Audio[id].audioData;
      if (this.game.Audio.MasterVolume !== 1) {
        if (filters === null) {
          filters = [this.CreateGain(this.game.Audio.MasterVolume)];
        } else {
          filters.push(this.CreateGain(this.game.Audio.MasterVolume));
        }
      }
      if (filters === null) {
        filters = [this.CreateGain(this.volume)];
      } else {
        filters = slice.call(filters).concat([this.CreateGain(this.volume)]);
      }
      lastFilter = null;
      for (index = k = 0, len = filters.length; k < len; index = ++k) {
        filter = filters[index];
        if (lastFilter === null) {
          source.connect(filter);
        } else {
          lastFilter.connect(filter);
        }
        lastFilter = filter;
        if (index === filters.length - 1) {
          filter.connect(this.audioContext.destination);
          source.start(time);
          return;
        }
      }
      source.connect(this.audioContext.destination);
      return source.start(time);
    };

    return AudioPlayer;

  })();

  HookManager = (function() {
    HookManager.prototype.positionTransform = null;

    function HookManager(game1) {
      this.game = game1;
      this.positionTransform = new Point(0, 0);
    }

    return HookManager;

  })();

  CanvasGame = (function() {
    function CanvasGame(canvasId1, width1, height1, name1, graphicsType1, pixel1) {
      this.canvasId = canvasId1;
      this.width = width1;
      this.height = height1;
      this.name = name1;
      this.graphicsType = graphicsType1;
      this.pixel = pixel1 != null ? pixel1 : 0;
      this.InitGame();
    }

    CanvasGame.MixIn(EventDispatcher);

    CanvasGame.prototype.InitGame = function() {
      this.InitEventDispatch();
      this.InitGraphics();
      return this.InitComponents();
    };

    CanvasGame.prototype.InitComponents = function() {
      var graphicsString, styleString;
      styleString = "background-color:orange; color:white; padding:2px; padding-right:5px;padding-left:5px";
      graphicsString = "WebGL";
      if (this.graphicsType === Torch.CANVAS) {
        graphicsString = "Canvas";
      }
      console.log("%c Torch v" + Torch.prototype.version + " |" + graphicsString + "| - " + this.name, styleString);
      this.Loop = new Loop(this);
      this.Load = new Load(this);
      this.Mouse = new Mouse(this);
      this.Timer = new Timer(this);
      this.Camera = new Camera(this);
      this.Layers = new Layers(this);
      this.Debug = new Debug(this);
      this.Keys = new Keys(this);
      this.Tweens = new TweenManager(this);
      this.Particles = new ParticleManager(this);
      this.Audio = new Audio(this);
      this.Hooks = new HookManager(this);
      Style();
      this.deltaTime = 0;
      this.fps = 0;
      this.averageFps = 0;
      this.allFPS = 0;
      this.ticks = 0;
      this.zoom = 1;
      this.uidCounter = 0;
      this.paused = false;
      this.time = null;
      this.LastTimeStamp = null;
      this.spriteList = [];
      this.threeList = [];
      this.taskList = [];
      this.animations = [];
      this.tweens = [];
      this.DrawStack = [];
      this.AddStack = [];
      this.GamePads = [];
      this.events = {};
      return this.filter = {};
    };

    CanvasGame.prototype.InitGraphics = function() {
      this.canvasNode = document.createElement("CANVAS");
      this.canvasNode.width = window.innerWidth;
      this.canvasNode.height = window.innerHeight;
      document.getElementById(this.canvasId).appendChild(this.canvasNode);
      this.canvas = this.canvasNode.getContext("2d");
      return this.Clear("#cc5200");
    };

    CanvasGame.prototype.PixelScale = function() {
      this.canvas.mozImageSmoothingEnabled = false;
      this.canvas.imageSmoothingEnabled = false;
      return this;
    };

    CanvasGame.prototype.Start = function(load, update, draw, init) {
      if (load === void 0) {
        this.FatalError("Unable to start game '" + this.name + "' without load function");
      }
      if (update === void 0) {
        this.FatalError("Unable to start game '" + this.name + "' without update function");
      }
      if (draw === void 0) {
        this.FatalError("Unable to start game '" + this.name + "' without draw function");
      }
      if (init === void 0) {
        this.FatalError("Unable to start game '" + this.name + "' without update function");
      }
      this.load = load;
      this.update = update;
      this.draw = draw;
      this.init = init;
      this.load(this);
      this.Load.Load((function(_this) {
        return function() {
          _this.init(_this);
          _this.WireUpEvents();
          return _this.Run();
        };
      })(this));
      this.canvasNode.width = this.width;
      this.canvasNode.height = this.height;
      if (typeof this.width === "string") {
        this.canvasNode.width = document.body.clientWidth - 50;
      }
      if (typeof this.height === "string") {
        return this.canvasNode.height = document.body.clientHeight - 25;
      }
    };

    CanvasGame.prototype.Add = function(o) {
      if (o === void 0 || o._torch_add === void 0) {
        this.FatalError("Cannot add object: " + o.constructor.name + " to game");
      }
      if (o._torch_add === "Sprite") {
        o._torch_uid = "TORCHSPRITE" + this.uidCounter.toString();
        o._torch_add_order = this.uidCounter;
        this.AddStack.push(o);
        return this.uidCounter++;
      } else if (o._torch_add === "Three") {
        o.game = this;
        return this.gl_scene.add(o.entity);
      } else if (o._torch_add === "Task") {
        return this.taskList.push(o);
      }
    };

    CanvasGame.prototype.Task = function(task) {
      this.taskList.push(task);
      return this;
    };

    CanvasGame.prototype.Run = function(timestamp) {
      return this.Loop.Run(0);
    };

    CanvasGame.prototype.FlushSprites = function() {
      var k, len, ref, results, sprite;
      ref = this.spriteList;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        results.push(sprite.Trash());
      }
      return results;
    };

    CanvasGame.prototype.FatalError = function(error) {
      var errorHtml, stack;
      if (this.fatal) {
        return;
      }
      this.fatal = true;
      if (typeof error === "string") {
        error = new Error(error);
      }
      this.Clear("#000");
      stack = error.stack.replace(/\n/g, "<br><br>");
      errorHtml = "<code style='color:#C9302Cmargin-left:15%font-size:24px'>" + error + "</code>\n<br>\n<code style='color:#C9302Cfont-size:20pxfont-weight:bold'>Stack Trace:</code>\n<br>\n<code style='color:#C9302Cfont-size:20px'>" + stack + "</code>\n<br>\n<code style='color:#C9302Cfont-size:18px'>Time: " + this.time + "</code>";
      document.body.innerHTML = errorHtml;
      this.RunGame = function() {};
      this.Run = function() {};
      this.Emit("FatalError", new Torch.Event(this, {
        error: error
      }));
      throw error;
    };

    CanvasGame.prototype.UpdateTasks = function() {
      var k, len, ref, task;
      ref = this.taskList;
      for (k = 0, len = ref.length; k < len; k++) {
        task = ref[k];
        task.Execute(this);
      }
      return this.taskList = Torch.Util.Array(this.taskList).Filter(function(t) {
        return !t.trash;
      });
    };

    CanvasGame.prototype.UpdateSprites = function() {
      var k, len, ref, sprite;
      ref = this.spriteList;
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        if (!sprite.trash) {
          if (!sprite.game.paused) {
            sprite.Update();
          }
        } else {
          sprite.trashed = true;
          sprite.Emit("Trash", new Torch.Event(this));
        }
      }
      this.spriteList = Torch.Util.Array(this.spriteList).Filter(function(s) {
        return !s.trash;
      });
      this.spriteList = this.spriteList.concat(this.AddStack);
      return this.AddStack = [];
    };

    CanvasGame.prototype.DrawSprites = function() {
      var k, len, ref, results, sprite;
      this.canvas.clearRect(0, 0, this.Camera.Viewport.maxWidth, this.Camera.Viewport.maxHeight);
      this.spriteList.sort(function(a, b) {
        if (a.drawIndex === b.drawIndex) {
          return a._torch_add_order - b._torch_add_order;
        }
        return a.drawIndex - b.drawIndex;
      });
      ref = this.spriteList;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        if (sprite.draw && !sprite.trash && !sprite.GHOST_SPRITE) {
          results.push(sprite.Draw());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    CanvasGame.prototype.UpdateAnimations = function() {
      var anim, k, len, ref, results;
      ref = this.animations;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        anim = ref[k];
        results.push(anim.Run());
      }
      return results;
    };

    CanvasGame.prototype.UpdateTimeInfo = function() {
      this.fps = Math.round(1000 / this.deltaTime);
      if (this.fps === 2e308) {
        this.allFPS += 0;
      } else {
        this.allFPS += Math.round(1000 / this.deltaTime);
      }
      this.ticks++;
      return this.averageFps = Math.round(this.allFPS / this.ticks);
    };

    CanvasGame.prototype.UpdateGamePads = function() {
      var k, len, pad, pads, results;
      if (navigator.getGamepads && typeof navigator.getGamepads) {
        this.GamePads = [];
        pads = navigator.getGamepads();
        results = [];
        for (k = 0, len = pads.length; k < len; k++) {
          pad = pads[k];
          if (pad) {
            results.push(this.GamePads.push(new Torch.GamePad(pad)));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    CanvasGame.prototype.Clear = function(color) {
      if (color === void 0) {
        this.FatalError("Cannot clear undefined color");
      }
      if (typeof color === "object") {
        color = color.hex;
      }
      this.canvasNode.style.backgroundColor = color;
      return this;
    };

    CanvasGame.prototype.File = function(fileId) {
      if (this.Files[fileId] === void 0) {
        return this.FatalError("Unable to access no-existent file: " + fileId + ". File does not exist");
      } else {
        return this.Files[fileId];
      }
    };

    CanvasGame.prototype.Sound = function(soundId) {
      if (this.Assets.Sounds[soundId] === void 0) {
        return this.FatalError("Unable to access no-existent file: " + soundId + ". File does not exist");
      } else {
        return this.Assets.Sounds[soundId].audio;
      }
    };

    CanvasGame.prototype.getCanvasEvents = function() {
      var evts;
      evts = [
        [
          "mousemove", (function(_this) {
            return function(e) {
              _this.Mouse.SetMousePos(_this.canvasNode, e);
              return _this.Emit("MouseMove", new Torch.Event(_this, {
                nativeEvent: e
              }));
            };
          })(this)
        ], [
          "mousedown", (function(_this) {
            return function(e) {
              _this.Mouse.down = true;
              return _this.Emit("MouseDown", new Torch.Event(_this, {
                nativeEvent: e
              }));
            };
          })(this)
        ], [
          "mouseup", (function(_this) {
            return function(e) {
              _this.Mouse.down = false;
              return _this.Emit("MouseUp", new Torch.Event(_this, {
                nativeEvent: e
              }));
            };
          })(this)
        ], [
          "touchstart", (function(_this) {
            return function(e) {
              return _this.Mouse.down = true;
            };
          })(this)
        ], [
          "touchend", (function(_this) {
            return function(e) {
              return _this.Mouse.down = false;
            };
          })(this)
        ], [
          "click", (function(_this) {
            return function(e) {
              e.preventDefault();
              e.stopPropagation();
              _this.Emit("Click", new Torch.Event(_this, {
                nativeEvent: e
              }));
              return false;
            };
          })(this)
        ]
      ];
      return evts;
    };

    CanvasGame.prototype.getBodyEvents = function() {
      var bodyEvents;
      bodyEvents = [
        [
          "keydown", (function(_this) {
            return function(e) {
              var c, key;
              c = e.keyCode;
              key = _this.Keys.SpecialKey(c);
              if (key === null) {
                key = _this.Keys[String.fromCharCode(e.keyCode).toUpperCase()];
              }
              key.down = true;
              return key.Emit("KeyDown", new Torch.Event(_this, {
                nativeEvent: e
              }));
            };
          })(this)
        ], [
          "keyup", (function(_this) {
            return function(e) {
              var c, key;
              c = e.keyCode;
              key = _this.Keys.SpecialKey(c);
              if (key === null) {
                key = _this.Keys[String.fromCharCode(e.keyCode).toUpperCase()];
              }
              key.down = false;
              return key.Emit("KeyUp", new Torch.Event(_this, {
                nativeEvent: e
              }));
            };
          })(this)
        ]
      ];
      return bodyEvents;
    };

    CanvasGame.prototype.WireUpEvents = function() {
      var eventItem, k, len, len1, m, pads, ref, ref1, resize;
      ref = this.getCanvasEvents();
      for (k = 0, len = ref.length; k < len; k++) {
        eventItem = ref[k];
        this.canvasNode.addEventListener(eventItem[0], eventItem[1], false);
      }
      ref1 = this.getBodyEvents();
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        eventItem = ref1[m];
        document.body.addEventListener(eventItem[0], eventItem[1], false);
      }
      resize = (function(_this) {
        return function(event) {
          return _this.Emit("Resize", new Torch.Event(_this, {
            nativeEvent: event
          }));
        };
      })(this);
      window.addEventListener('resize', resize, false);
      return pads = navigator.getGamepads();
    };

    CanvasGame.prototype.TogglePause = function() {
      if (!this.paused) {
        this.paused = true;
      } else {
        this.paused = false;
      }
      return this;
    };

    return CanvasGame;

  })();

  Game = (function() {
    function Game(canvasId, width, height, name, graphicsType, pixel) {
      if (graphicsType === Torch.CANVAS) {
        return new Torch.CanvasGame(canvasId, width, height, name, graphicsType, pixel);
      }
      if (graphicsType === Torch.WEBGL) {
        return new Torch.WebGLGame(canvasId, width, height, name, graphicsType, pixel);
      }
    }

    return Game;

  })();

  Game = CanvasGame;

  StateMachine = (function() {
    function StateMachine(obj1) {
      this.obj = obj1;
      this.currentState = null;
      this.states = {};
      this.game = this.obj.game;
    }

    StateMachine.prototype.State = function(stateName, stateObj) {
      if (stateObj === void 0) {
        if (this.states[stateName] === void 0) {
          Torch.FatalError("Unable to get state. State '" + stateName + "' has not been added to the state machine");
        }
        return this.states[stateName];
      } else {
        stateObj.stateMachine = this;
        stateObj.game = this.game;
        return this.states[stateName] = stateObj;
      }
    };

    StateMachine.prototype.Switch = function() {
      var args, newState, ref, ref1;
      newState = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this.currentState && this.currentState.End !== void 0) {
        (ref = this.currentState).End.apply(ref, [this.obj].concat(slice.call(args)));
      }
      if (this.State(newState).Start !== void 0) {
        (ref1 = this.State(newState)).Start.apply(ref1, [this.obj].concat(slice.call(args)));
      }
      return this.currentState = this.State(newState);
    };

    StateMachine.prototype.Update = function() {
      if (this.currentState !== null && this.currentState !== void 0) {
        return this.currentState.Execute(this.obj);
      }
    };

    return StateMachine;

  })();

  State = (function() {
    function State(Execute, Start, End) {
      this.Execute = Execute;
      this.Start = Start;
      this.End = End;
    }

    return State;

  })();

  Bind = (function() {
    function Bind(sprite) {
      if (sprite.GL) {
        return new WebGLBind(sprite);
      }
      return new CanvasBind(sprite);
    }

    return Bind;

  })();

  CanvasBind = (function() {
    function CanvasBind(sprite1) {
      this.sprite = sprite1;
    }

    CanvasBind.prototype.Texture = function(textureId, optionalParameters) {
      var scale, tex;
      tex = null;
      if (typeof textureId === "string") {
        tex = this.sprite.game.Assets.Textures[textureId];
        if (!tex) {
          this.sprite.game.FatalError("Sprite.Bind.Texture given textureId '" + textureId + "' was not found");
        }
      } else {
        tex = textureId;
      }
      scale = 1;
      if (typeof textureId === "string") {
        this.sprite.DrawTexture = tex;
      } else {
        this.sprite.DrawTexture = {
          image: textureId
        };
      }
      this.sprite.Size.Set(tex.width, tex.height);
      this.sprite.DrawTexture.drawParams = {
        clipX: 0,
        clipY: 0,
        clipWidth: this.sprite.DrawTexture.image.width,
        clipHeight: this.sprite.DrawTexture.image.height
      };
      return this.sprite.DrawTexture;
    };

    return CanvasBind;

  })();

  Color = (function() {
    function Color(rOrHex, g, b, a) {
      this.hex = "";
      this.Red = 0;
      this.Green = 0;
      this.Blue = 0;
      this.Alpha = 1;
      this.Init(rOrHex, g, b, a);
    }

    Color.prototype.Init = function(rOrHex, g, b, a) {
      if (g === void 0 && g !== null) {
        return this.GetHexFromRGB(rOrHex, g, b, a);
      } else {
        return this.GetRGBFromHex(rOrHex);
      }
    };

    Color.prototype.GetHexadecimal = function(dec, a) {
      var hexa;
      hexa = Math.round(dec * a).toString(16);
      if (hexa.length === 1) {
        hexa = "0" + hexa;
      }
      return hexa;
    };

    Color.prototype.GetHexFromRGB = function(r, g, b, a) {
      this.Red = r;
      this.Green = g;
      this.Blue = b;
      this.Alpha = a;
      return this.hex = "#" + this.GetHexadecimal(r, a) + this.GetHexadecimal(g, a) + this.GetHexadecimal(b, a);
    };

    Color.prototype.GetRGBFromHex = function() {};

    Color.prototype.BlendHex = function() {
      return this.GetRGBFromHex(this.hex);
    };

    Color.prototype.BlendRGB = function() {
      return this.GetHexFromRGB(this.Red, this.Green, this.Blue, this.Alpha);
    };

    Color.prototype.GetRGBString = function() {
      return "rgba(" + this.Red + "," + this.Green + "," + this.Blue + "," + this.Alpha + ");";
    };

    return Color;

  })();

  Color.Red = new Color(256, 0, 0, 1);

  Color.Green = new Color(0, 256, 0, 1);

  Color.Blue = new Color(0, 0, 256, 1);

  Color.Flame = new Color("#ff8000");

  Color.Ruby = new Color("#e60000");

  Electron = (function() {
    function Electron() {}

    Electron.Import = function() {
      Torch.ELECTRON = true;
      return Torch.fs = require("fs");
    };

    return Electron;

  })();

  CanvasRenderer = (function() {
    function CanvasRenderer(sprite1) {
      this.sprite = sprite1;
      this.game = this.sprite.game;
      this.previousPosition = new Point(this.sprite.position.x, this.sprite.position.y);
    }

    CanvasRenderer.prototype.Draw = function() {
      var cameraTransform, drawRec, frame, params;
      drawRec = new Rectangle(this.sprite.position.x, this.sprite.position.y, this.sprite.rectangle.width, this.sprite.rectangle.height);
      drawRec.x = (this.sprite.position.x - this.previousPosition.x) * this.game.Loop.lagOffset + this.previousPosition.x;
      drawRec.y = (this.sprite.position.y - this.previousPosition.y) * this.game.Loop.lagOffset + this.previousPosition.y;
      this.previousPosition = new Point(this.sprite.position.x, this.sprite.position.y);
      cameraTransform = new Point(0, 0);
      if (!this.sprite.fixed) {
        drawRec.x += this.game.Camera.position.x + this.game.Hooks.positionTransform.x;
        drawRec.y += this.game.Camera.position.y + this.game.Hooks.positionTransform.y;
      }
      if (this.sprite.DrawTexture) {
        frame = this.sprite.DrawTexture;
        params = frame.drawParams;
        this.PreRender(drawRec);
        this.game.canvas.drawImage(this.sprite.DrawTexture.image, params.clipX, params.clipY, params.clipWidth, params.clipHeight, -drawRec.width / 2, -drawRec.height / 2, drawRec.width, drawRec.height);
        if (this.sprite.Body.DEBUG && false) {
          this.game.canvas.fillStyle = "green";
          this.game.canvas.globalAlpha = 0.5;
          this.game.canvas.fillRect(-drawRec.width / 2, -drawRec.height / 2, drawRec.width, drawRec.height);
        }
        return this.PostRender();
      }
    };

    CanvasRenderer.prototype.PreRender = function(drawRec) {
      var canvas;
      canvas = this.game.canvas;
      canvas.save();
      canvas.translate(drawRec.x + drawRec.width / 2, drawRec.y + drawRec.height / 2);
      if (this.sprite.Effects.tint.color !== null) {
        this.game.canvas.fillStyle = this.sprite.Effects.tint.color;
        this.game.canvas.globalAlpha = this.sprite.Effects.tint.opacity;
        this.game.canvas.globalCompositeOperation = "destination-atop";
        this.game.canvas.fillRect(-drawRec.width / 2, -drawRec.height / 2, drawRec.width, drawRec.height);
      }
      canvas.globalAlpha = this.sprite.opacity;
      return canvas.rotate(this.sprite.rotation);
    };

    CanvasRenderer.prototype.PostRender = function() {
      var canvas;
      canvas = this.game.canvas;
      return canvas.restore();
    };

    return CanvasRenderer;

  })();

  Rectangle = (function() {
    function Rectangle(x1, y1, width1, height1) {
      this.x = x1;
      this.y = y1;
      this.width = width1;
      this.height = height1;
      this.z = 0;
    }

    Rectangle.prototype.GetOffset = function(rectangle) {
      var halfHeights, halfWidths, offset, sharedXPlane, sharedYPlane, vx, vy;
      vx = (this.x + (this.width / 2)) - (rectangle.x + (rectangle.width / 2));
      vy = (this.y + (this.height / 2)) - (rectangle.y + (rectangle.height / 2));
      halfWidths = (this.width / 2) + (rectangle.width / 2);
      halfHeights = (this.height / 2) + (rectangle.height / 2);
      sharedXPlane = (this.x + this.width) - (rectangle.x + rectangle.width);
      sharedYPlane = (this.y + this.height) - (rectangle.y + rectangle.height);
      offset = {
        x: halfWidths - Math.abs(vx),
        y: halfHeights - Math.abs(vy),
        vx: vx,
        vy: vy,
        halfWidths: halfWidths,
        halfHeights: halfHeights,
        sharedXPlane: sharedXPlane,
        sharedYPlane: sharedYPlane
      };
      return offset;
    };

    Rectangle.prototype.Intersects = function(rectangle) {
      var a, b;
      a = this;
      b = rectangle;
      if (a.x < (b.x + b.width) && (a.x + a.width) > b.x && a.y < (b.y + b.height) && (a.y + a.height) > b.y) {
        return a.GetOffset(b);
      } else {
        return false;
      }
    };

    Rectangle.prototype.ShiftFrom = function(rectangle, transX, transY) {
      var x, y;
      x = null;
      y = null;
      if (transX === void 0) {
        x = rectangle.x;
      } else {
        x = rectangle.x + transX;
      }
      if (transY === void 0) {
        y = rectangle.y;
      } else {
        y = rectangle.y + transY;
      }
      this.x = x;
      return this.y = y;
    };

    return Rectangle;

  })();

  Vector = (function() {
    Vector.prototype.x = null;

    Vector.prototype.y = null;

    Vector.prototype.angle = null;

    Vector.prototype.magnitude = null;

    function Vector(x1, y1) {
      this.x = x1;
      this.y = y1;
      this.ResolveVectorProperties();
    }

    Vector.prototype.ResolveVectorProperties = function() {
      this.magnitude = Math.sqrt(this.x * this.x + this.y * this.y);
      return this.angle = Math.atan2(this.x, this.y);
    };

    Vector.prototype.Clone = function() {
      return new Torch.Vector(this.x, this.y);
    };

    Vector.prototype.Set = function(x, y) {
      this.x = x;
      this.y = y;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.AddScalar = function(n) {
      this.x += n;
      this.y += n;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.MultiplyScalar = function(n) {
      this.x *= n;
      this.y *= n;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.DivideScalar = function(n) {
      this.x /= n;
      this.y /= n;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.SubtractVector = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.AddVector = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.Normalize = function() {
      return this.DivideScalar(this.magnitude);
    };

    Vector.prototype.DotProduct = function(v) {
      return this.x * v.x + this.y * v.y;
    };

    Vector.prototype.IsPerpendicular = function(v) {
      return this.DotProduct(v) === 0;
    };

    Vector.prototype.IsSameDirection = function(v) {
      return this.DotProduct(v) > 0;
    };

    return Vector;

  })();

  Point = (function() {
    function Point(x1, y1, z) {
      this.x = x1;
      this.y = y1;
      this.z = z != null ? z : 0;
    }

    Point.prototype.Apply = function(point) {
      this.x += point.x;
      return this.y += point.y;
    };

    Point.prototype.Clone = function() {
      return new Point(this.x, this.y);
    };

    return Point;

  })();

  exports = this;

  Enum = function() {
    var i, k, len, obj, part, parts;
    parts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    obj = {};
    for (i = k = 0, len = parts.length; k < len; i = ++k) {
      part = parts[i];
      obj[part] = i + 1;
    }
    return obj;
  };

  Utilities = (function() {
    function Utilities() {}

    Utilities.prototype.Expose = function() {
      return window["T"] = this;
    };

    Utilities.prototype.RandomInRange = function() {};

    Utilities.prototype.String = function(str) {
      return new StringUtility(str);
    };

    Utilities.prototype.Array = function(array) {
      return new ArrayUtility(array);
    };

    Utilities.prototype.Function = function(func) {
      return new FunctionUtility(func);
    };

    Utilities.prototype.Object = function(obj) {
      return new ObjectUtility(obj);
    };

    Utilities.prototype.Math = function() {
      return new MathUtility();
    };

    return Utilities;

  })();

  StringUtility = (function() {
    function StringUtility(str1) {
      this.str = str1;
    }

    StringUtility.prototype.String = function() {
      return this.str;
    };

    StringUtility.prototype.Chunk = function(chunkLength) {
      this.str = this.str.match(new RegExp('.{1,' + chunkLength + '}', 'g'));
      return this.str;
    };

    StringUtility.prototype.Capitalize = function() {
      this.str[0] = this.str[0].toUpperCase();
      return this.str;
    };

    return StringUtility;

  })();

  ArrayUtility = (function() {
    function ArrayUtility(array1) {
      this.array = array1;
    }

    ArrayUtility.prototype.Array = function() {
      return this.array;
    };

    ArrayUtility.prototype.All = function(applier) {
      var item, k, len, ref, results;
      ref = this.array;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        results.push(applier(item));
      }
      return results;
    };

    ArrayUtility.prototype.Find = function(selector) {
      var item, k, len, ref;
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (selector(item)) {
          return item;
        }
      }
    };

    ArrayUtility.prototype.Filter = function(selector) {
      var item, k, len, ref, selectedItems;
      selectedItems = [];
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (selector(item)) {
          selectedItems.push(item);
        }
      }
      return selectedItems;
    };

    ArrayUtility.prototype.Reject = function(selector) {
      var item, k, len, ref, selectedItems;
      selectedItems = [];
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (!selector(item)) {
          selectedItems.push(item);
        }
      }
      return selectedItems;
    };

    ArrayUtility.prototype.Where = function(properties) {
      var items;
      items = this.Filter(function(item) {
        var key, value;
        for (key in properties) {
          value = properties[key];
          if (item[key] !== value) {
            return false;
          }
        }
        return true;
      });
      return items;
    };

    ArrayUtility.prototype.Every = function(selector) {
      var item, k, len, ref;
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (!selector(item)) {
          return false;
        }
      }
      return true;
    };

    ArrayUtility.prototype.Some = function(selector) {
      var item, k, len, ref;
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (selector(item)) {
          return true;
        }
      }
      return false;
    };

    ArrayUtility.prototype.Contains = function(item, startIndex) {
      var index;
      if (startIndex == null) {
        startIndex = 0;
      }
      index = this.array.indexOf(item);
      return index !== -1 && index >= startIndex;
    };

    ArrayUtility.prototype.Pluck = function(propertyName) {
      var item, k, len, properties, ref;
      properties = [];
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        properties.push(item[propertyName]);
      }
      return properties;
    };

    ArrayUtility.prototype.Max = function(selector) {
      var compareValue, currentMax, item, k, len, ref;
      currentMax = 0;
      if (selector == null) {
        selector = function(item) {
          return item;
        };
      }
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        compareValue = selector(item);
        if (compareValue > currentMax) {
          currentMax = item;
        }
      }
      return currentMax;
    };

    ArrayUtility.prototype.Min = function(selector) {
      var compareValue, currentMin, item, k, len, ref;
      currentMin = 0;
      if (selector == null) {
        selector = function(item) {
          return item;
        };
      }
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        compareValue = selector(item);
        if (compareValue < currentMin) {
          currentMin = compareValue;
        }
      }
      return currentMin;
    };

    ArrayUtility.prototype.SortBy = function(sorter) {};

    ArrayUtility.prototype.GroupBy = function(grouper) {
      var group, groups, item, k, len, ref;
      if (grouper == null) {
        grouper = function(item) {
          return item.toString().length;
        };
      }
      groups = {};
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        group = grouper(item);
        if (groups[group] == null) {
          groups[group] = [item];
        } else {
          groups[group].push(item);
        }
      }
      return groups;
    };

    ArrayUtility.prototype.CountBy = function(grouper) {
      var groups, key, value;
      groups = this.GroupBy(grouper);
      for (key in groups) {
        value = groups[key];
        groups[key] = value.length;
      }
      return groups;
    };

    ArrayUtility.prototype.Shuffle = function() {
      var currentIndex, randomIndex, temporaryValue;
      currentIndex = this.array.length;
      temporaryValue = currentIndex;
      randomIndex = currentIndex;
      while (0 !== currentIndex) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        temporaryValue = this.array[currentIndex];
        this.array[currentIndex] = this.array[randomIndex];
        this.array[randomIndex] = temporaryValue;
      }
      return this.array;
    };

    ArrayUtility.prototype.Sample = function(n) {
      var results, sample;
      if (n == null) {
        n = 1;
      }
      sample = [];
      results = [];
      while (n > 0) {
        results.push(n--);
      }
      return results;
    };

    ArrayUtility.prototype.Partition = function(checker) {
      return [this.Filter(checker), this.Reject(checker)];
    };

    ArrayUtility.prototype.First = function(n) {
      var items;
      if (n == null) {
        n = 1;
      }
      if (n === 1) {
        return this.array[0];
      }
      items = [];
      while (n <= this.array.length) {
        items.push(this.array[n - 1]);
        n++;
      }
      return items;
    };

    ArrayUtility.prototype.Last = function(n) {
      var items;
      if (n == null) {
        n = 1;
      }
      if (n === 1) {
        return this.array[this.array.length - 1];
      }
      items = [];
      while (n <= this.array.length) {
        items.push(this.array[this.array.length - (n - 1)]);
        n++;
      }
      return items;
    };

    ArrayUtility.prototype.Flatten = function() {};

    ArrayUtility.prototype.Without = function() {
      var filteredItems, item, k, len, ref, values;
      values = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      filteredItems = [];
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (values.indexOf(item) === -1) {
          filteredItems.push(item);
        }
      }
      return filteredItems;
    };

    ArrayUtility.prototype.Union = function() {
      var ar, arrays, ars, combinedArray, item, k, len, len1, m;
      arrays = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      ars = [this.array].concat(slice.call(arrays));
      combinedArray = [];
      for (k = 0, len = ars.length; k < len; k++) {
        ar = ars[k];
        for (m = 0, len1 = ar.length; m < len1; m++) {
          item = ar[m];
          if (combinedArray.indexOf(item) === -1) {
            combinedArray.push(item);
          }
        }
      }
      return combinedArray;
    };

    ArrayUtility.prototype.Intersection = function() {
      var ar, arrays, ars, combinedArray, index, item, k, key, len, len1, m, value;
      arrays = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      ars = [this.array].concat(slice.call(arrays));
      combinedArray = [];
      index = {};
      for (k = 0, len = ars.length; k < len; k++) {
        ar = ars[k];
        for (m = 0, len1 = ar.length; m < len1; m++) {
          item = ar[m];
          if (index[item] == null) {
            index[item] = 1;
          } else {
            index[item] += 1;
          }
        }
      }
      for (key in index) {
        value = index[key];
        if (value >= arrays.length) {
          combinedArray.push(key);
        }
      }
      return combinedArray;
    };

    ArrayUtility.prototype.Uniq = function() {};

    ArrayUtility.prototype.Zip = function() {
      var ar, arrays, combinedArray, index, item, k, len, len1, m, piece, ref;
      arrays = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      combinedArray = [];
      ref = this.array;
      for (index = k = 0, len = ref.length; k < len; index = ++k) {
        item = ref[index];
        piece = [item];
        for (m = 0, len1 = arrays.length; m < len1; m++) {
          ar = arrays[m];
          piece.push(ar[index]);
        }
        combinedArray.push(piece);
      }
      return combinedArray;
    };

    ArrayUtility.prototype.UnZip = function() {
      var arrays;
      arrays = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    };

    return ArrayUtility;

  })();

  FunctionUtility = (function() {
    function FunctionUtility(func1) {
      this.func = func1;
    }

    FunctionUtility.prototype.Defer = function() {
      var args, f;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      f = (function(_this) {
        return function() {
          return _this.func.apply(_this, args);
        };
      })(this);
      return setTimeout(f, 0);
    };

    FunctionUtility.prototype.Once = function() {
      var newFunc, oldFunc;
      oldFunc = this.func;
      newFunc = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (this.called) {
          return;
        }
        oldFunc.apply(null, args);
        return this.called = true;
      };
      return newFunc;
    };

    FunctionUtility.prototype.After = function(timesBeforeExecuted) {
      var newFunc, oldFunc;
      oldFunc = this.func;
      newFunc = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        this.timesBeforeExecuted += 1;
        if (this.calledCount < timesBeforeExecuted) {
          return;
        }
        oldFunc.apply(null, args);
        return this.called = true;
      };
      newFunc.timesBeforeExecuted = 0;
      return newFunc;
    };

    FunctionUtility.prototype.Before = function(timesExecuted) {
      var newFunc, oldFunc;
      oldFunc = this.func;
      newFunc = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        this.timesExecuted += 1;
        if (this.calledCount > timesExecuted) {
          return;
        }
        oldFunc.apply(null, args);
        return this.called = true;
      };
      newFunc.timesExecuted = 0;
      return newFunc;
    };

    FunctionUtility.prototype.Compose = function() {
      var allFuncs, funcs, i, newFunc;
      funcs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      allFuncs = [this.func].concat(slice.call(funcs));
      i = 0;
      newFunc = function() {
        var lastReturn, results;
        lastReturn = void 0;
        results = [];
        while (i < allFuncs.length) {
          lastReturn = allFuncs[i](lastReturn);
          results.push(i++);
        }
        return results;
      };
      return newFunc;
    };

    return FunctionUtility;

  })();

  ObjectUtility = (function() {
    function ObjectUtility(obj1) {
      this.obj = obj1;
    }

    ObjectUtility.prototype.Keys = function() {
      var key, keys, ref, value;
      keys = [];
      ref = this.obj;
      for (key in ref) {
        value = ref[key];
        keys.push(key);
      }
      return keys;
    };

    ObjectUtility.prototype.Values = function() {
      var key, ref, value, values;
      values = [];
      ref = this.obj;
      for (key in ref) {
        value = ref[key];
        values.push(value);
      }
      return values;
    };

    ObjectUtility.prototype.All = function(applier) {
      var key, ref, value;
      ref = this.obj;
      for (key in ref) {
        value = ref[key];
        this.obj[key] = applier(key, value);
      }
      return this.obj;
    };

    ObjectUtility.prototype.Invert = function() {
      var key, newObj, ref, value;
      newObj = {};
      ref = this.obj;
      for (key in ref) {
        value = ref[key];
        newObj[value] = key;
      }
      return newObj;
    };

    ObjectUtility.prototype.Functions = function() {
      var functionList, key, ref, value;
      functionList = [];
      ref = this.obj;
      for (key in ref) {
        value = ref[key];
        if (typeof value === "function") {
          functionList.push(value.name);
        }
      }
      return functionList;
    };

    ObjectUtility.prototype.Extend = function() {
      var k, key, len, obj, objects, value;
      objects = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (k = 0, len = objects.length; k < len; k++) {
        obj = objects[k];
        for (key in obj) {
          value = obj[key];
          this.obj[key] = value;
        }
      }
      return this.obj;
    };

    ObjectUtility.prototype.Pick = function() {
      var k, key, len, newObj, pickKeys, ref, value;
      pickKeys = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      newObj = {};
      if (typeof pickKeys === "function") {
        ref = this.obj;
        for (key in ref) {
          value = ref[key];
          if (pickKeys(key, value, this.obj)) {
            newObj[key] = value;
          }
        }
      } else {
        for (k = 0, len = pickKeys.length; k < len; k++) {
          key = pickKeys[k];
          newObj[key] = this.obj[key];
        }
      }
      return newObj;
    };

    ObjectUtility.prototype.Omit = function() {
      var key, newObj, omitKeys, ref, ref1, value;
      omitKeys = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      newObj = {};
      if (typeof omitKeys === "function") {
        ref = this.obj;
        for (key in ref) {
          value = ref[key];
          if (!omitKeys(key, value, this.obj)) {
            newObj[key] = value;
          }
        }
      } else {
        ref1 = this.obj;
        for (key in ref1) {
          value = ref1[key];
          if (omitKeys.indexOf(key) === -1) {
            newObj[key] = this.obj[key];
          }
        }
      }
      return newObj;
    };

    ObjectUtility.prototype.Clone = function() {};

    ObjectUtility.prototype.Has = function(key) {
      if (this.obj[key] == null) {
        return false;
      }
      return true;
    };

    ObjectUtility.prototype.Matches = function(otherObj) {
      var key, value;
      for (key in otherObj) {
        value = otherObj[key];
        if (this.obj[key] !== value) {
          return false;
        }
      }
      return true;
    };

    ObjectUtility.prototype.Empty = function() {
      return this.Keys().length === 0;
    };

    return ObjectUtility;

  })();

  MathUtility = (function() {
    function MathUtility() {}

    MathUtility.prototype.RandomInRange = function(min, max) {
      return Math.random() * (max - min + 1) + min;
    };

    return MathUtility;

  })();

  Task = (function() {
    Task.MixIn(Trashable);

    Task.prototype._torch_add = "Task";

    function Task(func1) {
      this.func = func1;
    }

    Task.prototype.Execute = function(game) {
      return this.func(game);
    };

    return Task;

  })();

  AjaxLoader = (function() {
    AjaxLoader.prototype.onFinish = function() {};

    AjaxLoader.prototype.onError = function() {};

    function AjaxLoader(url, responseType) {
      if (responseType == null) {
        responseType = window.Torch.AjaxData.Text;
      }
      this.url = url;
      this.responseType = this.GetResponseTypeString(responseType);
    }

    AjaxLoader.prototype.GetResponseTypeString = function(responseType) {
      switch (responseType) {
        case window.Torch.AjaxData.DOMString:
          return "";
        case window.Torch.AjaxData.ArrayBuffer:
          return "arraybuffer";
        case window.Torch.AjaxData.Blob:
          return "blob";
        case window.Torch.AjaxData.Document:
          return "document";
        case window.Torch.AjaxData.Json:
          return "json";
        case window.Torch.AjaxData.Text:
          return "text";
      }
    };

    AjaxLoader.prototype.Error = function(func) {
      return this.onError = func;
    };

    AjaxLoader.prototype.Finish = function(func) {
      return this.onFinish = func;
    };

    AjaxLoader.prototype.Load = function() {
      var request;
      request = new XMLHttpRequest();
      request.open('GET', this.url, true);
      request.responseType = this.responseType;
      request.onload = (function(_this) {
        return function() {
          return _this.onFinish(request.response, _this);
        };
      })(this);
      return request.send();
    };

    return AjaxLoader;

  })();

  Event = (function() {
    function Event(game1, data1) {
      var key, ref, value;
      this.game = game1;
      this.data = data1;
      if (this.game !== null) {
        this.time = this.game.time;
      }
      ref = this.data;
      for (key in ref) {
        value = ref[key];
        this[key] = value;
      }
    }

    return Event;

  })();

  Torch = (function() {
    var Is;

    Torch.prototype.CANVAS = 1;

    Torch.prototype.WEBGL = 2;

    Torch.prototype.PIXEL = 3;

    Torch.prototype.DUMP_ERRORS = false;

    Torch.GamePads = Enum("Pad1", "Pad2", "Pad3", "Pad4");

    Torch.AjaxData = Enum("DOMString", "ArrayBuffer", "Blob", "Document", "Json", "Text");

    Torch.Types = Enum("String", "Number", "Object", "Array", "Function", "Sprite", "Game", "Null");

    Torch.Easing = Enum("Linear", "Square", "Cube", "InverseSquare", "InverseCube", "Smooth", "SmoothSquare", "SmoothCube", "Sine", "InverseSine");

    Torch.AjaxLoader = AjaxLoader;

    Torch.Event = Event;

    Torch.Util = new Utilities();

    function Torch() {
      this.GamePads = Enum("Pad1", "Pad2", "Pad3", "Pad4");
      this.AjaxData = Enum("DOMString", "ArrayBuffer", "Blob", "Document", "Json", "Text");
      this.Types = Enum("String", "Number", "Object", "Array", "Function", "Sprite", "Game", "Null");
      this.Easing = Enum("Linear", "Square", "Cube", "InverseSquare", "InverseCube", "Smooth", "SmoothSquare", "SmoothCube", "Sine", "InverseSine");
      this.Event = Event;
      this.EventDispatcher = EventDispatcher;
      this.Trashable = Trashable;
      this.Util = new Utilities();
      this.Color = Color;
      this.DebugConsole = DebugConsole;
      this.StateMachine = StateMachine;
      this.Rectangle = Rectangle;
      this.Vector = Vector;
      this.Point = Point;
      this.Game = Game;
      this.Sprite = Sprite;
      this.SpriteGrid = SpriteGrid;
      this.SpriteGroup = SpriteGroup;
      this.Text = Text;
      this.Collider = {};
      this.Collider.CollisionDetector = CollisionDetector;
      this.Collider.Circle = Circle;
      this.Collider.AABB = AABB;
      this.CollisionManager = CollisionManager;
      this.Collision = Collision;
      this.Electron = new Electron();
    }

    Torch.FatalError = function(error) {
      var errorHtml, stack;
      if (this.fatal) {
        return;
      }
      this.fatal = true;
      if (typeof error === "string") {
        error = new Error(error);
      }
      document.body.backgroundColor = "black";
      if (this.DUMP_ERRORS) {
        if (require !== void 0) {
          require("fs").writeFileSync("torch-error.log", error.stack);
        }
      }
      stack = error.stack.replace(/\n/g, "<br><br>");
      errorHtml = "<code style='color:#C9302C;margin-left:15%;font-size:24px'>" + error + "</code>\n<br>\n<code style='color:#C9302C;font-size:20px;font-weight:bold'>Stack Trace:</code><br>\n<code style='color:#C9302C;font-size:20px'>" + stack + "</code><br>";
      document.body.innerHTML = errorHtml;
      throw error;
    };

    Torch.prototype.StrictErrors = function() {
      return this.STRICT_ERRORS = true;
    };

    Torch.prototype.DumpErrors = function() {
      return this.DUMP_ERRORS = true;
    };

    Torch.prototype.DisableConsoleWarnings = function() {
      return console.warn = function() {};
    };

    Torch.prototype.Assert = function(expression, errorTag) {
      if (errorTag == null) {
        errorTag = "Assertation Failed";
      }
      if (!expression) {
        return Torch.FatalError(errorTag);
      }
    };

    Torch.prototype.TypeOf = function(obj) {
      var objTypes, typeString;
      objTypes = [];
      if (obj.__torch__ !== void 0) {
        objTypes.push(obj.__torch__);
      }
      typeString = {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
      switch (typeString) {
        case "string":
          objTypes.push(Torch.Types.String);
          break;
        case "number":
          objTypes.push(Torch.Types.Number);
          break;
        case "object":
          objTypes.push(Torch.Types.Object);
          break;
        case "array":
          objTypes.push(Torch.Types.Array);
          break;
        case "function":
          objTypes.push(Torch.Types.Function);
          break;
        default:
          objTypes.push(Torch.Types.Null);
      }
      return objTypes;
    };

    Is = function(obj, torchType) {
      return Torch.TypeOf(obj).indexOf(torchType) !== -1;
    };

    Torch.prototype.ExtendObject = function(objectToExtend, newObject) {
      var key, results, value;
      results = [];
      for (key in newObject) {
        value = newObject[key];
        results.push(objectToExtend[key] = value);
      }
      return results;
    };

    Torch.prototype.ExtendProperties = function() {
      var Class, func, k, keyProp, len, prop, properties, results;
      Class = arguments[0], properties = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      results = [];
      for (k = 0, len = properties.length; k < len; k++) {
        prop = properties[k];
        keyProp = prop.unCapitalize();
        func = function(arg) {
          if (arg === void 0) {
            return this[keyProp];
          }
          this[keyProp] = arg;
          return this;
        };
        results.push(Class.prototype[prop] = func);
      }
      return results;
    };

    return Torch;

  })();

  exports.Torch = new Torch();

  Torch.prototype.version = '0.6.6';

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\dev\js\Torch.js\Builds\torch-latest.coffee