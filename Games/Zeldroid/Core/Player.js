// Generated by CoffeeScript 1.10.0
(function() {
  var Player, PlayerBullet, idleState, moveState,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Player = (function(superClass) {
    extend(Player, superClass);

    Player.prototype.VELOCITY = 0.4;

    Player.prototype.stoppped = false;

    Player.prototype.touching = null;

    function Player(game) {
      this.InitSprite(game, 0, 0);
      this.Bind.Texture("player");
      this.Center();
      this.movementStateMachine = this.States.CreateStateMachine("Movement");
      this.movementStateMachine.State("idle", idleState);
      this.movementStateMachine.State("move", moveState);
      this.movementStateMachine.Switch("idle");
      this.drawIndex = 11;
      this.position.y = window.innerHeight - 100;
      this.facing = "forward";
      this.SetUpCollisions();
      this.game.Keys.Space.On("KeyDown", (function(_this) {
        return function(event) {
          var b;
          return b = new PlayerBullet(_this);
        };
      })(this));
    }

    Player.Load = function(game) {
      game.Load.Texture("Assets/Art/player.png", "player");
      return game.Load.Texture("Assets/Art/particle.png", "player-bullet");
    };

    Player.prototype.Update = function() {
      return Player.__super__.Update.call(this);
    };

    Player.prototype.SetUpCollisions = function() {
      this.Collisions.Monitor();
      return this.On("Collision", (function(_this) {
        return function(event) {
          return _this.HandleCollision(event);
        };
      })(this));
    };

    Player.prototype.HandleCollision = function(event) {
      if (!event.collisionData.collider.hardBlock) {
        return;
      }
      return this.Collisions.SimpleCollisionHandle(event, 0.5);
    };

    return Player;

  })(Torch.Sprite);

  idleState = {
    Execute: function(player) {
      if (this.game.Keys.W.down) {
        player.facing = "forward";
        return this.stateMachine.Switch("move", "W", {
          x: 0,
          y: -1
        });
      } else if (this.game.Keys.S.down) {
        player.facing = "backward";
        return this.stateMachine.Switch("move", "S", {
          x: 0,
          y: 1
        });
      } else if (this.game.Keys.D.down) {
        player.facing = "right";
        return this.stateMachine.Switch("move", "D", {
          x: 1,
          y: 0
        });
      } else if (this.game.Keys.A.down) {
        player.facing = "left";
        return this.stateMachine.Switch("move", "A", {
          x: -1,
          y: 0
        });
      }
    },
    Start: function(player) {
      player.Body.velocity.x = 0;
      return player.Body.velocity.y = 0;
    },
    End: function(player) {}
  };

  moveState = {
    Execute: function(player) {
      if (!this.game.Keys[this.triggerKey].down) {
        return this.stateMachine.Switch("idle");
      }
    },
    Start: function(player, key, velocity) {
      player.Body.velocity.y = velocity.y * player.VELOCITY;
      player.Body.velocity.x = velocity.x * player.VELOCITY;
      return this.triggerKey = key;
    },
    End: function(player) {}
  };

  PlayerBullet = (function(superClass) {
    extend(PlayerBullet, superClass);

    function PlayerBullet(shooter) {
      this.InitSprite(shooter.game, shooter.position.x, shooter.position.y);
      this.Bind.Texture("player-bullet");
      this.drawIndex = shooter.drawIndex + 1;
      this.VELOCITY = 0.5;
      switch (shooter.facing) {
        case "forward":
          this.Body.velocity.y = -1 * this.VELOCITY;
          break;
        case "backward":
          this.Body.velocity.y = 1 * this.VELOCITY;
          break;
        case "right":
          this.Body.velocity.x = 1 * this.VELOCITY;
          break;
        case "left":
          this.Body.velocity.x = -1 * this.VELOCITY;
      }
      this.Body.omega = 0.02;
      this.Size.scale.width = this.Size.scale.height = 10;
      this.game.Tweens.Tween(this, 500, Torch.Easing.Smooth).To({
        opacity: 0
      }).On("Finish", (function(_this) {
        return function() {
          return _this.Trash();
        };
      })(this));
    }

    PlayerBullet.prototype.Update = function() {
      return PlayerBullet.__super__.Update.call(this);
    };

    return PlayerBullet;

  })(Torch.Sprite);

  window.Player = Player;

}).call(this);
