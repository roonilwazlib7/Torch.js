// Generated by CoffeeScript 1.10.0
(function() {
  var Player, PlayerBullet, idleState, moveState,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Player = (function(superClass) {
    extend(Player, superClass);

    Player.prototype.VELOCITY = 0.4;

    Player.prototype.stoppped = false;

    Player.prototype.touching = null;

    function Player(game) {
      this.InitSprite(game, 0, 0);
      this.Bind.Texture("player-right-idle");
      this.spriteSheetAnim = this.Animations.SpriteSheet(16, 16, 2);
      this.spriteSheetAnim.Stop();
      this.audioPlayer = this.game.Audio.CreateAudioPlayer();
      this.audioPlayer.volume = 0.25;
      this.movementStateMachine = this.States.CreateStateMachine("Movement");
      this.movementStateMachine.State("idle", idleState);
      this.movementStateMachine.State("move", moveState);
      this.movementStateMachine.Switch("idle");
      this.drawIndex = 11;
      this.facing = "forward";
      this.shootKeyWasDown = false;
      this.game.Camera.JerkFollow(this);
      this.game.Keys.Space.On("KeyUp", (function(_this) {
        return function() {
          var b;
          _this.audioPlayer.PlaySound("shoot");
          return b = new PlayerBullet(_this);
        };
      })(this));
      this.SetUpCollisions();
    }

    Player.Load = function(game) {
      game.Load.Texture("Assets/Art/player/player-forward-idle.png", "player-forward-idle");
      game.Load.Texture("Assets/Art/player/player-backward-idle.png", "player-backward-idle");
      game.Load.Texture("Assets/Art/player/player-right-idle-sheet.png", "player-right-idle");
      game.Load.Texture("Assets/Art/player/player-left.png", "player-left-idle");
      game.Load.Texture("Assets/Art/player/bullet.png", "player-bullet");
      return game.Load.Texture("Assets/Art/player/shoot-particle.png", "shoot-particle");
    };

    Player.prototype.Update = function() {
      return Player.__super__.Update.call(this);
    };

    Player.prototype.SetUpCollisions = function() {
      this.Collisions.Monitor();
      return this.On("Collision", (function(_this) {
        return function(event) {
          return _this.HandleCollision(event);
        };
      })(this));
    };

    Player.prototype.HandleCollision = function(event) {
      if (!event.collisionData.collider.hardBlock) {
        return;
      }
      return this.Collisions.SimpleCollisionHandle(event, 0.5);
    };

    return Player;

  })(Torch.Sprite);

  idleState = {
    Execute: function(player) {
      if (this.game.Keys.W.down) {
        player.facing = "forward";
        return this.stateMachine.Switch("move", "W", {
          x: 0,
          y: -1
        });
      } else if (this.game.Keys.S.down) {
        player.facing = "backward";
        return this.stateMachine.Switch("move", "S", {
          x: 0,
          y: 1
        });
      } else if (this.game.Keys.D.down) {
        player.facing = "right";
        return this.stateMachine.Switch("move", "D", {
          x: 1,
          y: 0
        });
      } else if (this.game.Keys.A.down) {
        player.facing = "left";
        return this.stateMachine.Switch("move", "A", {
          x: -1,
          y: 0
        });
      }
    },
    Start: function(player) {
      player.Body.velocity.x = 0;
      return player.Body.velocity.y = 0;
    },
    End: function(player) {}
  };

  moveState = {
    Execute: function(player) {
      if (!this.game.Keys[this.triggerKey].down) {
        return this.stateMachine.Switch("idle");
      }
    },
    Start: function(player, key, velocity) {
      player.spriteSheetAnim.Start();
      player.Body.velocity.y = velocity.y * player.VELOCITY;
      player.Body.velocity.x = velocity.x * player.VELOCITY;
      this.triggerKey = key;
      switch (player.facing) {
        case "forward":
          player.Bind.Texture("player-forward-idle");
          return player.spriteSheetAnim.SyncFrame();
        case "backward":
          player.Bind.Texture("player-backward-idle");
          return player.spriteSheetAnim.SyncFrame();
        case "right":
          player.Bind.Texture("player-right-idle");
          return player.spriteSheetAnim.SyncFrame();
        case "left":
          player.Bind.Texture("player-left-idle");
          return player.spriteSheetAnim.SyncFrame();
      }
    },
    End: function(player) {
      player.spriteSheetAnim.Stop();
      return player.spriteSheetAnim.Index(0);
    }
  };

  PlayerBullet = (function(superClass) {
    extend(PlayerBullet, superClass);

    PlayerBullet.prototype.DAMAGE = 1;

    function PlayerBullet(shooter) {
      this.InitSprite(shooter.game, shooter.position.x, shooter.position.y);
      this.Bind.Texture("player-bullet");
      this.drawIndex = shooter.drawIndex + 1;
      this.VELOCITY = 1.5;
      switch (shooter.facing) {
        case "forward":
          this.Body.velocity.y = -1 * this.VELOCITY;
          this.position.y -= 0.3 * shooter.rectangle.height;
          this.position.x += 0.1 * shooter.rectangle.width;
          break;
        case "backward":
          this.Body.velocity.y = 1 * this.VELOCITY;
          this.position.x += 0.1 * shooter.rectangle.width;
          this.position.y += 0.3 * shooter.rectangle.height;
          break;
        case "right":
          this.Body.velocity.x = 1 * this.VELOCITY;
          this.position.x += 1.1 * shooter.rectangle.width;
          this.position.y += 0.25 * shooter.rectangle.height;
          this.rotation = Math.PI / 2;
          break;
        case "left":
          this.Body.velocity.x = -1 * this.VELOCITY;
          this.position.x -= 0.1 * shooter.rectangle.width;
          this.position.y += 0.25 * shooter.rectangle.height;
          this.rotation = Math.PI / 2;
      }
      this.Size.scale.width = this.Size.scale.height = 10;
      this.emitter = this.game.Particles.ParticleEmitter(500, 500, 500, true, "shoot-particle", {
        spread: 20,
        gravity: 0.0001,
        minAngle: 0,
        maxAngle: Math.PI * 2,
        minScale: 2,
        maxScale: 4,
        minVelocity: 0.01,
        maxVelocity: 0.01,
        minAlphaDecay: 200,
        maxAlphaDecay: 250,
        minOmega: 0.001,
        maxOmega: 0.001
      });
      this.emitter.auto = false;
      this.emitter.position = this.position.Clone();
      this.emitter.EmitParticles(true);
      this.Collisions.Monitor();
      this.On("Collision", (function(_this) {
        return function(event) {
          if (!event.collisionData.collider.hardBlock) {
            return;
          }
          event.collisionData.collider.hp -= _this.DAMAGE;
          _this.Trash();
          _this.emitter.particle = "particle";
          _this.emitter.position = _this.position.Clone();
          return _this.emitter.EmitParticles(true);
        };
      })(this));
    }

    PlayerBullet.prototype.Update = function() {
      return PlayerBullet.__super__.Update.call(this);
    };

    return PlayerBullet;

  })(Torch.Sprite);

  window.Player = Player;

}).call(this);
