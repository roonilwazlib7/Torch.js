// Generated by CoffeeScript 1.12.1
(function() {
  var Blob, Branch, Bumps, Bush, LightGrass, MapPiece, PlayerStart, Water, exports,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = this;

  MapPiece = (function(superClass) {
    extend(MapPiece, superClass);

    MapPiece.prototype.MAPPIECE = true;

    MapPiece.prototype.identifier = 0;

    MapPiece.prototype.textureId = "";

    MapPiece.prototype.data = null;

    MapPiece.prototype.scaleWidth = 1;

    MapPiece.prototype.scaleHeight = 1;

    MapPiece.prototype.hardBlock = true;

    MapPiece.prototype.hp = 2;

    function MapPiece(game, rawData) {
      var scale;
      this.InitSprite(game, 0, 0);
      this.Bind.Texture(this.textureId);
      this.data = this.GetData(rawData, game);
      this.position.x = this.data.position.x * this.DrawTexture.image.width;
      this.position.y = this.data.position.y * this.DrawTexture.image.height;
      this.drawIndex = 10;
      scale = this.game.GetScale();
      this.Size.Scale(scale, scale);
    }

    MapPiece.Load = function(game) {
      game.Load.Texture("Assets/Art/map/bush.png", "bush");
      game.Load.Texture("Assets/Art/map/water.png", "water");
      game.Load.Texture("Assets/Art/map/branch.png", "branch");
      game.Load.Texture("Assets/Art/map/light-grass.png", "light-grass");
      return game.Load.Texture("Assets/Art/map/bumps.png", "bumps");
    };

    MapPiece.prototype.GetData = function(rawData, game) {
      var data, scale;
      scale = this.game.GetScale();
      data = {};
      data.position = {
        x: parseInt(rawData[0], 16) * scale,
        y: parseInt(rawData[1], 16) * scale
      };
      return data;
    };

    MapPiece.prototype.Update = function() {
      MapPiece.__super__.Update.call(this);
      if (this.hp <= 0) {
        return this.Die();
      }
    };

    MapPiece.prototype.Die = function() {
      this.emitter = this.game.Particles.ParticleEmitter(500, 0, 0, true, this.textureId, {
        spread: 20,
        gravity: 0.0001,
        minAngle: 0,
        maxAngle: Math.PI * 2,
        minScale: 0.1,
        maxScale: 0.5,
        minVelocity: 0.01,
        maxVelocity: 0.01,
        minAlphaDecay: 400,
        maxAlphaDecay: 450,
        minOmega: 0.001,
        maxOmega: 0.001
      });
      this.emitter.auto = false;
      this.emitter.position = this.position.Clone();
      this.Trash();
      return this.emitter.EmitParticles(true);
    };

    return MapPiece;

  })(Torch.Sprite);

  Bush = (function(superClass) {
    extend(Bush, superClass);

    function Bush() {
      return Bush.__super__.constructor.apply(this, arguments);
    }

    Bush.prototype.textureId = "bush";

    Bush.prototype.hp = 2e308;

    return Bush;

  })(MapPiece);

  PlayerStart = (function(superClass) {
    extend(PlayerStart, superClass);

    function PlayerStart() {
      return PlayerStart.__super__.constructor.apply(this, arguments);
    }

    PlayerStart.prototype.textureId = "player-start";

    return PlayerStart;

  })(MapPiece);

  Water = (function(superClass) {
    extend(Water, superClass);

    function Water() {
      return Water.__super__.constructor.apply(this, arguments);
    }

    Water.prototype.textureId = "water";

    Water.prototype.identifier = 1;

    return Water;

  })(MapPiece);

  Branch = (function(superClass) {
    extend(Branch, superClass);

    function Branch() {
      return Branch.__super__.constructor.apply(this, arguments);
    }

    Branch.prototype.textureId = "branch";

    Branch.prototype.identifier = 2;

    return Branch;

  })(MapPiece);

  LightGrass = (function(superClass) {
    extend(LightGrass, superClass);

    function LightGrass() {
      return LightGrass.__super__.constructor.apply(this, arguments);
    }

    LightGrass.prototype.hardBlock = false;

    LightGrass.prototype.textureId = "light-grass";

    LightGrass.prototype.identifier = 3;

    return LightGrass;

  })(MapPiece);

  Bumps = (function(superClass) {
    extend(Bumps, superClass);

    function Bumps() {
      return Bumps.__super__.constructor.apply(this, arguments);
    }

    Bumps.prototype.hardBlock = false;

    Bumps.prototype.textureId = "bumps";

    Bumps.prototype.identifier = 4;

    return Bumps;

  })(MapPiece);

  Blob = (function(superClass) {
    extend(Blob, superClass);

    function Blob() {
      return Blob.__super__.constructor.apply(this, arguments);
    }

    Blob.prototype.hardBlock = true;

    Blob.prototype.textureId = "blob";

    Blob.prototype.identifier = 5;

    return Blob;

  })(MapPiece);

  exports.MapPieces = {
    MapPiece: MapPiece,
    Bush: Bush,
    Water: Water,
    Branch: Branch,
    LightGrass: LightGrass,
    Bumps: Bumps
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwUGllY2UuanMiLCJzb3VyY2VSb290IjoiLi5cXC4uXFwuLlxcLi4iLCJzb3VyY2VzIjpbIkdhbWVzXFxaZWxkcm9pZFxcU3JjXFxNYXBQaWVjZXNcXE1hcFBpZWNlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQSxNQUFBLDRFQUFBO0lBQUE7OztFQUFBLE9BQUEsR0FBVTs7RUFDSjs7O3VCQUNGLFFBQUEsR0FBVTs7dUJBQ1YsVUFBQSxHQUFZOzt1QkFDWixTQUFBLEdBQVc7O3VCQUNYLElBQUEsR0FBTTs7dUJBQ04sVUFBQSxHQUFZOzt1QkFDWixXQUFBLEdBQWE7O3VCQUNiLFNBQUEsR0FBVzs7dUJBQ1gsRUFBQSxHQUFJOztJQUNTLGtCQUFDLElBQUQsRUFBTyxPQUFQO0FBQ1QsVUFBQTtNQUFBLElBQUMsQ0FBQSxVQUFELENBQVksSUFBWixFQUFrQixDQUFsQixFQUFxQixDQUFyQjtNQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTixDQUFjLElBQUMsQ0FBQSxTQUFmO01BQ0EsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFDLENBQUEsT0FBRCxDQUFTLE9BQVQsRUFBa0IsSUFBbEI7TUFFUixJQUFDLENBQUEsUUFBUSxDQUFDLENBQVYsR0FBYyxJQUFDLENBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFmLEdBQW1CLElBQUMsQ0FBQSxXQUFXLENBQUMsS0FBSyxDQUFDO01BQ3BELElBQUMsQ0FBQSxRQUFRLENBQUMsQ0FBVixHQUFjLElBQUMsQ0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQWYsR0FBbUIsSUFBQyxDQUFBLFdBQVcsQ0FBQyxLQUFLLENBQUM7TUFFcEQsSUFBQyxDQUFBLFNBQUQsR0FBYTtNQUViLEtBQUEsR0FBUSxJQUFDLENBQUEsSUFBSSxDQUFDLFFBQU4sQ0FBQTtNQUNSLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixDQUFZLEtBQVosRUFBa0IsS0FBbEI7SUFYUzs7SUFhYixRQUFDLENBQUEsSUFB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S0FBQSxFQUFPLEtBRlA7SUFHQSxNQUFBLEVBQVEsTUFIUjtJQUlBLFVBQUEsRUFBWSxVQUpaO0lBS0EsS0FBQSxFQUFPLEtBTFA7O0FBbEdKIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IHRoaXNcclxuY2xhc3MgTWFwUGllY2UgZXh0ZW5kcyBUb3JjaC5TcHJpdGVcclxuICAgIE1BUFBJRUNFOiB0cnVlXHJcbiAgICBpZGVudGlmaWVyOiAwXHJcbiAgICB0ZXh0dXJlSWQ6IFwiXCJcclxuICAgIGRhdGE6IG51bGxcclxuICAgIHNjYWxlV2lkdGg6IDFcclxuICAgIHNjYWxlSGVpZ2h0OiAxXHJcbiAgICBoYXJkQmxvY2s6IHRydWVcclxuICAgIGhwOiAyXHJcbiAgICBjb25zdHJ1Y3RvcjogKGdhbWUsIHJhd0RhdGEpIC0+XHJcbiAgICAgICAgQEluaXRTcHJpdGUoZ2FtZSwgMCwgMCApXHJcbiAgICAgICAgQEJpbmQuVGV4dHVyZShAdGV4dHVyZUlkKVxyXG4gICAgICAgIEBkYXRhID0gQEdldERhdGEocmF3RGF0YSwgZ2FtZSlcclxuXHJcbiAgICAgICAgQHBvc2l0aW9uLnggPSBAZGF0YS5wb3NpdGlvbi54ICogQERyYXdUZXh0dXJlLmltYWdlLndpZHRoXHJcbiAgICAgICAgQHBvc2l0aW9uLnkgPSBAZGF0YS5wb3NpdGlvbi55ICogQERyYXdUZXh0dXJlLmltYWdlLmhlaWdodFxyXG5cclxuICAgICAgICBAZHJhd0luZGV4ID0gMTBcclxuXHJcbiAgICAgICAgc2NhbGUgPSBAZ2FtZS5HZXRTY2FsZSgpXHJcbiAgICAgICAgQFNpemUuU2NhbGUoc2NhbGUsc2NhbGUpXHJcblxyXG4gICAgQExvYWQ6IChnYW1lKSAtPlxyXG4gICAgICAgIGdhbWUuTG9hZC5UZXh0dXJlKFwiQXNzZXRzL0FydC9tYXAvYnVzaC5wbmdcIiwgXCJidXNoXCIpXHJcbiAgICAgICAgZ2FtZS5Mb2FkLlRleHR1cmUoXCJBc3NldHMvQXJ0L21hcC93YXRlci5wbmdcIiwgXCJ3YXRlclwiKVxyXG4gICAgICAgIGdhbWUuTG9hZC5UZXh0dXJlKFwiQXNzZXRzL0FydC9tYXAvYnJhbmNoLnBuZ1wiLCBcImJyYW5jaFwiKVxyXG4gICAgICAgIGdhbWUuTG9hZC5UZXh0dXJlKFwiQXNzZXRzL0FydC9tYXAvbGlnaHQtZ3Jhc3MucG5nXCIsIFwibGlnaHQtZ3Jhc3NcIilcclxuICAgICAgICBnYW1lLkxvYWQuVGV4dHVyZShcIkFzc2V0cy9BcnQvbWFwL2J1bXBzLnBuZ1wiLCBcImJ1bXBzXCIpXHJcblxyXG5cclxuICAgIEdldERhdGE6IChyYXdEYXRhLCBnYW1lKSAtPlxyXG4gICAgICAgIHNjYWxlID0gQGdhbWUuR2V0U2NhbGUoKVxyXG4gICAgICAgIGRhdGEgPSB7fVxyXG4gICAgICAgIGRhdGEucG9zaXRpb24gPVxyXG4gICAgICAgICAgICB4OiBwYXJzZUludChyYXdEYXRhWzBdLCAxNikgKiBzY2FsZVxyXG4gICAgICAgICAgICB5OiBwYXJzZUludChyYXdEYXRhWzFdLCAxNikgKiBzY2FsZVxyXG5cclxuICAgICAgICByZXR1cm4gZGF0YVxyXG5cclxuICAgIFVwZGF0ZTogLT5cclxuICAgICAgICBzdXBlcigpXHJcblxyXG4gICAgICAgIGlmIEBocCA8PSAwXHJcbiAgICAgICAgICAgIEBEaWUoKVxyXG5cclxuICAgIERpZTogLT5cclxuICAgICAgICBAZW1pdHRlciA9IEBnYW1lLlBhcnRpY2xlcy5QYXJ0aWNsZUVtaXR0ZXIgNTAwLCAwLCAwLCB0cnVlLCBAdGV4dHVyZUlkLFxyXG4gICAgICAgICAgICBzcHJlYWQ6IDIwXHJcbiAgICAgICAgICAgIGdyYXZpdHk6IDAuMDAwMVxyXG4gICAgICAgICAgICBtaW5BbmdsZTogMFxyXG4gICAgICAgICAgICBtYXhBbmdsZTogTWF0aC5QSSAqIDJcclxuICAgICAgICAgICAgbWluU2NhbGU6IDAuMVxyXG4gICAgICAgICAgICBtYXhTY2FsZTogMC41XHJcbiAgICAgICAgICAgIG1pblZlbG9jaXR5OiAwLjAxXHJcbiAgICAgICAgICAgIG1heFZlbG9jaXR5OiAwLjAxXHJcbiAgICAgICAgICAgIG1pbkFscGhhRGVjYXk6IDQwMFxyXG4gICAgICAgICAgICBtYXhBbHBoYURlY2F5OiA0NTBcclxuICAgICAgICAgICAgbWluT21lZ2E6IDAuMDAxXHJcbiAgICAgICAgICAgIG1heE9tZWdhOiAwLjAwMVxyXG4gICAgICAgIEBlbWl0dGVyLmF1dG8gPSBmYWxzZVxyXG4gICAgICAgIEBlbWl0dGVyLnBvc2l0aW9uID0gQHBvc2l0aW9uLkNsb25lKClcclxuICAgICAgICBAVHJhc2goKVxyXG4gICAgICAgIEBlbWl0dGVyLkVtaXRQYXJ0aWNsZXModHJ1ZSlcclxuXHJcblxyXG5cclxuY2xhc3MgQnVzaCBleHRlbmRzIE1hcFBpZWNlXHJcbiAgICB0ZXh0dXJlSWQ6IFwiYnVzaFwiXHJcbiAgICBocDogSW5maW5pdHlcclxuXHJcbmNsYXNzIFBsYXllclN0YXJ0IGV4dGVuZHMgTWFwUGllY2VcclxuICAgIHRleHR1cmVJZDogXCJwbGF5ZXItc3RhcnRcIlxyXG5cclxuY2xhc3MgV2F0ZXIgZXh0ZW5kcyBNYXBQaWVjZVxyXG4gICAgdGV4dHVyZUlkOiBcIndhdGVyXCJcclxuICAgIGlkZW50aWZpZXI6IDFcclxuXHJcbmNsYXNzIEJyYW5jaCBleHRlbmRzIE1hcFBpZWNlXHJcbiAgICB0ZXh0dXJlSWQ6IFwiYnJhbmNoXCJcclxuICAgIGlkZW50aWZpZXI6IDJcclxuXHJcbmNsYXNzIExpZ2h0R3Jhc3MgZXh0ZW5kcyBNYXBQaWVjZVxyXG4gICAgaGFyZEJsb2NrOiBmYWxzZVxyXG4gICAgdGV4dHVyZUlkOiBcImxpZ2h0LWdyYXNzXCJcclxuICAgIGlkZW50aWZpZXI6IDNcclxuXHJcbmNsYXNzIEJ1bXBzIGV4dGVuZHMgTWFwUGllY2VcclxuICAgIGhhcmRCbG9jazogZmFsc2VcclxuICAgIHRleHR1cmVJZDogXCJidW1wc1wiXHJcbiAgICBpZGVudGlmaWVyOiA0XHJcblxyXG5jbGFzcyBCbG9iIGV4dGVuZHMgTWFwUGllY2VcclxuICAgIGhhcmRCbG9jazogdHJ1ZVxyXG4gICAgdGV4dHVyZUlkOiBcImJsb2JcIlxyXG4gICAgaWRlbnRpZmllcjogNVxyXG5cclxuZXhwb3J0cy5NYXBQaWVjZXMgPVxyXG4gICAgTWFwUGllY2U6IE1hcFBpZWNlXHJcbiAgICBCdXNoOiBCdXNoXHJcbiAgICBXYXRlcjogV2F0ZXJcclxuICAgIEJyYW5jaDogQnJhbmNoXHJcbiAgICBMaWdodEdyYXNzOiBMaWdodEdyYXNzLFxyXG4gICAgQnVtcHM6IEJ1bXBzXHJcbiJdfQ==
//# sourceURL=C:\dev\js\Torch.js\Games\Zeldroid\Src\MapPieces\MapPiece.coffee