{
    "assets": [
        {
            "data": "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",
            "type": "texture",
            "fileType": "png"
        },
        {
            "data": "TVkgU0FNUExFIFRFWFQhDQo=",
            "type": "file",
            "fileType": "txt"
        }
    ]
}