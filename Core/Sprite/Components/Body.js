// Generated by CoffeeScript 1.10.0
(function() {
  var Body;

  Body = (function() {
    function Body(sprite) {
      this.sprite = sprite;
      Torch.Assert(this.sprite !== null && this.sprite.__torch__ === Torch.Types.Sprite);
      this.game = this.sprite.game;
      this.velocity = new Torch.Vector(0, 0);
      this.acceleration = new Torch.Vector(0, 0);
      this.omega = 0;
      this.alpha = 0;
    }

    Body.prototype.Update = function() {
      this.sprite.position.x += this.velocity.x * this.game.Loop.updateDelta;
      this.sprite.position.y += this.velocity.y * this.game.Loop.updateDelta;
      this.velocity.x += this.acceleration.x * this.game.Loop.updateDelta;
      this.velocity.y += this.acceleration.y * this.game.Loop.updateDelta;
      return this.sprite.rotation += this.omega * this.game.Loop.updateDelta;
    };

    Body.prototype.Debug = function(turnOn) {
      if (turnOn == null) {
        turnOn = true;
      }
      return this.DEBUG = turnOn;
    };

    Body.prototype.AngleTo = function(otherSprite) {
      var directionVector;
      directionVector = this.DirectionTo(otherSprite);
      return directionVector.angle;
    };

    Body.prototype.DistanceTo = function(otherSprite) {
      var otherVec, thisVec;
      thisVec = new Torch.Vector(this.sprite.position.x, this.sprite.position.y);
      otherVec = new Torch.Vector(otherSprite.position.x, otherSprite.position.y);
      otherVec.SubtractVector(thisVec);
      return otherVec.magnitude;
    };

    Body.prototype.DirectionTo = function(otherSprite) {
      var vec;
      vec = new Torch.Vector(otherSprite.position.x - this.sprite.position.x, otherSprite.position.y - this.sprite.position.y);
      vec.Normalize();
      return vec;
    };

    return Body;

  })();

  Torch.Body = Body;

}).call(this);
