// Generated by CoffeeScript 1.10.0
(function() {
  var Circle, Graphic,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Graphic = (function(superClass) {
    extend(Graphic, superClass);

    function Graphic() {
      return Graphic.__super__.constructor.apply(this, arguments);
    }

    constructor.apply(null, args)(function() {
      this.RenderGraphic.apply(this, args);
      this.renderCanvas = document.createElement("CANVAS");
      return this.On("GraphicChanged", (function(_this) {
        return function(event) {
          return _this.RenderGraphic.apply(_this, event.renderProperites);
        };
      })(this));
    });

    return Graphic;

  })(Torch.Sprite);

  Circle = (function(superClass) {
    extend(Circle, superClass);

    function Circle() {
      return Circle.__super__.constructor.apply(this, arguments);
    }

    Circle.prototype.Radius = function(radius) {
      if (radius !== void 0 && radius !== this.radius) {
        return this.radius = radius;
      }
    };

    Circle.prototype.Color = function(color) {};

    Circle.prototype.OutlineColor = function(outlineColor) {};

    Circle.prototype.StartAngle = function(startAngle) {};

    Circle.prototype.EndAngle = function(endAngle) {};

    Circle.prototype.RenderGraphic = function(radius, color, outlineColor, startAngle, endAngle) {
      var im;
      if (outlineColor == null) {
        outlineColor = "black";
      }
      if (startAngle == null) {
        startAngle = 0;
      }
      if (endAngle == null) {
        endAngle = 2 * Math.PI;
      }
      this.renderCanvas.width = radius;
      this.renderCanvas.height = radius;
      this.canvas = this.renderCanvas.getContext("2d");
      this.canvas.beginPath();
      this.canvas.strokeStyle = outlineColor;
      this.canvas.fillStyle = color;
      this.canvas.arc(0, 0, radius, startAngle, endAngle);
      this.canvas.fill();
      if (outlineColor !== "") {
        this.canvas.stroke();
      }
      im = new Image();
      im.src = this.renderCanvas.toDataURL();
      return im.onload = (function(_this) {
        return function() {
          return _this.Bind.Texture(im);
        };
      })(this);
    };

    return Circle;

  })(Graphic);

}).call(this);
