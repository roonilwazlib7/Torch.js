// Generated by CoffeeScript 1.10.0
(function() {
  var GamePad, GamePadButton, GamePadManager, GamePadStick;

  GamePad = (function() {
    GamePad.MixIn(EventDispatcher);

    GamePad.prototype.connected = false;

    GamePad.prototype.buttons = null;

    GamePad.prototype.sticks = null;

    function GamePad(game, index1) {
      this.game = game;
      this.index = index1;
      this.InitEventDispatch();
      this.buttons = {
        A: new GamePadButton(this, 1),
        B: new GamePadButton(this, 2),
        Y: new GamePadButton(this, 3),
        X: new GamePadButton(this, 4)
      };
      this.buttonMap = ["A", "B", "Y", "X"];
      this.sticks = {
        LeftStick: new GamePadStick(this, 1),
        RightStick: new GamePadStick(this, 2)
      };
      this.stickMap = ["LeftStick", "RightStick"];
    }

    GamePad.prototype.SetState = function(nativeGamePad) {
      var button, i, index, j, len, len1, nativeButton, nativeStick, ref, ref1, results, stick;
      this.connected = nativeGamePad.connected;
      ref = nativeGamePad.buttons;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        nativeButton = ref[index];
        button = this.buttons[this.buttonMap[index]];
        button.SetState(nativeButton);
      }
      ref1 = nativeGamePad.axes;
      results = [];
      for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {
        nativeStick = ref1[index];
        stick = this.sticks[this.stickMap[index]];
        results.push(stick.SetState(nativeStick));
      }
      return results;
    };

    return GamePad;

  })();

  GamePadManager = (function() {
    GamePadManager.prototype._pads = null;

    function GamePadManager(game) {
      this.game = game;
      this._pads = [new GamePad(this.game), new GamePad(this.game), new GamePad(this.game), new GamePad(this.game)];
    }

    GamePadManager.prototype.Pad = function(index) {
      return this._pads[index];
    };

    GamePadManager.prototype.Update = function() {
      var i, index, len, nativeGamePads, pad, results;
      nativeGamePads = navigator.getGamepads();
      results = [];
      for (index = i = 0, len = nativeGamePads.length; i < len; index = ++i) {
        pad = nativeGamePads[index];
        results.push(this._pads[index].SetState(pad));
      }
      return results;
    };

    return GamePadManager;

  })();

  GamePadButton = (function() {
    GamePadButton.MixIn(EventDispatcher);

    GamePadButton.prototype._wasDown = false;

    GamePadButton.prototype.down = false;

    function GamePadButton(gamePad, buttonCode) {
      this.gamePad = gamePad;
      this.buttonCode = buttonCode;
      this.InitEventDispatch();
      this.game = this.gamePad.game;
    }

    GamePadButton.prototype.SetState = function(nativeGamePadButton) {
      if (this._wasDown && !nativeGamePadButton.pressed) {
        this.Emit("ButtonPressed", new Torch.Event(this.game, {
          button: this
        }));
      }
      this.down = nativeGamePadButton.pressed;
      return this._wasDown = this.down;
    };

    return GamePadButton;

  })();

  GamePadStick = (function() {
    GamePadStick.MixIn(EventDispatcher);

    function GamePadStick(gamePad, buttonCode) {
      this.gamePad = gamePad;
      this.buttonCode = buttonCode;
    }

    return GamePadStick;

  })();

}).call(this);
