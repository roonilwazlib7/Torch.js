// Generated by CoffeeScript 1.10.0
(function() {
  var Tween, TweenManager, TweenTypes, spr;

  TweenTypes = new Torch.Enum("Linear", "Quad", "Cube");

  TweenManager = (function() {
    function TweenManager() {}

    constructor(TweenManager.game)(function() {
      return this.tweens = [];
    });

    TweenManager.prototype.Tween = function(objectToTween, tweenProperties, startTime, currentTime, speed) {
      return this.tweens.Add(new Tween(this.game, objectToTween, tweenProperties, startTime, currentTime, speed));
    };

    TweenManager.prototype.Update = function() {
      var cleanedTweens, i, len, ref, tween;
      cleanedTweens = [];
      ref = this.tweens;
      for (i = 0, len = ref.length; i < len; i++) {
        tween = ref[i];
        if (!tween.trash) {
          tween.Update();
          cleanedTweens.push(tween);
        }
      }
      return this.tweens = cleanedTweens;
    };

    return TweenManager;

  })();

  Tween = (function() {
    var LinearTween;

    Tween.MixIn(Torch.Trashable);

    function Tween(game1, objectToTween1, tweenProperties1, tweenType, speed1) {
      this.game = game1;
      this.objectToTween = objectToTween1;
      this.tweenProperties = tweenProperties1;
      this.tweenType = tweenType;
      this.speed = speed1;
      this.startTime = this.game.time;
      this.lastTime = this.game.time;
    }

    LinearTween = function(objectToTween, tweenProperties, startTime, currentTime, speed) {
      var delta, distance, elapsedTime, key, value, velocity;
      elapsedTime = currentTime - startTime;
      for (key in tweenProperties) {
        value = tweenProperties[key];
        distance = value - objectToTween[key];
        velocity = distance / (speed - elapsedTime);
        delta = velocity * (currentTime - this.lastTime);
        objectToTween[key] += delta;
      }
      this.lastTime = currentTime;
      return objectToTween;
    };

    Tween.prototype.Update = function() {
      return this.Tweens[this.tweenType](this.objectToTween, this.tweenProperties, this.startTime, this.game.time, this.speed);
    };

    return Tween;

  })();

  spr = new Torch.Sprite(game, 0, 0);

  game.Tween(spr.position, Torch.Tweens.Linear).To({
    x: 100,
    y: 100
  }, function() {
    return alert("done!");
  });

}).call(this);
