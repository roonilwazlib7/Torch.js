// Generated by CoffeeScript 1.10.0
(function() {
  var GhostSprite, Sprite,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Sprite = (function() {
    function Sprite() {
      this.InitSprite();
    }

    Sprite.prototype.InitSprite = function(game, x, y) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (game === null || game === void 0) {
        Torch.FatalError("Unable to initialize sprite without game");
      }
      this.Bind = new Torch.Bind(this);
      this.Rectangle = new Torch.Rectangle(x, y, 0, 0);
      this.Body = new Torch.Body();
      this.HitBox = new Torch.HitBox();
      this.game = game;
      this.DrawTexture = null;
      this.TexturePack = null;
      this.TextureSheet = null;
      this.mouseOver = false;
      this.clickTrigger = false;
      this.clickAwayTrigger = false;
      this.draw = true;
      this.wasClicked = false;
      this.trash = false;
      this.fixed = false;
      this.drawIndex = 0;
      this.rotation = 0;
      this.opacity = 1;
      this._torch_add = "Sprite";
      this._torch_uid = "";
      this.events = {};
      return game.Add(this);
    };

    Sprite.prototype.ToggleFixed = function(tog) {
      if (tog !== void 0) {
        if (this.fixed) {
          this.fixed = false;
        } else {
          this.fixed = true;
        }
      } else {
        this.fixed = tog;
      }
      return this;
    };

    Sprite.prototype.UpdateSprite = function() {
      var shiftX, shiftY;
      this.UpdateBody();
      this.UpdateEvents();
      shiftX = this.Rectangle.width / 8;
      shiftY = this.Rectangle.height / 8;
      this.HitBox = {
        x: this.Rectangle.x + shiftX,
        y: this.Rectangle.y + shiftY,
        width: this.Rectangle.width - (2 * shiftX),
        height: this.Rectangle.height - (2 * shiftY)
      };
      if (!this.Rectangle.Intersects(this.game.BoundRec)) {
        return this.Emit("OutOfBounds", this);
      }
    };

    Sprite.prototype.UpdateEvents = function() {
      var mouseRec, reComputedMouseRec;
      if (!this.game.Mouse.GetRectangle(this.game).Intersects(this.Rectangle) && this.mouseOver) {
        this.mouseOver = false;
        this.Emit("MouseLeave", this);
      }
      if (this.game.Mouse.GetRectangle(this.game).Intersects(this.Rectangle)) {
        if (!this.mouseOver) {
          this.Emit("MouseOver", this);
        }
        this.mouseOver = true;
      } else if (this.fixed) {
        mouseRec = this.game.Mouse.GetRectangle();
        reComputedMouseRec = new Torch.Rectangle(mouseRec.x, mouseRec.y, mouseRec.width, mouseRec.height);
        reComputedMouseRec.x += this.game.Viewport.x;
        reComputedMouseRec.y += this.game.Viewport.y;
        if (reComputedMouseRec.Intersects(this.Rectangle)) {
          this.mouseOver = true;
        } else {
          this.mouseOver = false;
        }
      } else {
        this.mouseOver = false;
      }
      if (this.mouseOver && this.game.Mouse.down && !this.clickTrigger) {
        this.clickTrigger = true;
      }
      if (this.clickTrigger && !this.game.Mouse.down && this.mouseOver) {
        this.wasClicked = true;
        this.Emit("Click", this);
        this.clickTrigger = false;
      }
      if (this.clickTrigger && !this.game.Mouse.down && !this.mouseOver) {
        this.clickTrigger = false;
      }
      if (!this.game.Mouse.down(!!this.mouseOver && this.clickAwayTrigger)) {
        this.Emit("ClickAway", this);
        this.wasClicked = false;
        return this.clickAwayTrigger = false;
      } else if (this.clickTrigger && !this.game.Mouse.down && this.mouseOver) {
        return this.clickAwayTrigger = false;
      } else if (this.game.Mouse.down && !this.mouseOver) {
        return this.clickAwayTrigger = true;
      }
    };

    Sprite.prototype.UpdateBody = function() {
      var deltaTime, dir, ref, velX, velY;
      velX = this.Body.x.velocity;
      velY = this.Body.y.velocity;
      deltaTime = this.game.deltaTime;
      if (this.Body.x.acceleration !== this.Body.x.la) {
        this.Body.x.la = this.Body.x.acceleration;
        this.Body.x.aTime = 0;
      }
      if (this.Body.x.acceleration !== 0) {
        this.Body.x.aTime += deltaTime;
        velX += this.Body.x.aTime * this.Body.x.acceleration;
      }
      if (this.Body.y.acceleration !== this.Body.y.la) {
        this.Body.y.la = this.Body.y.acceleration;
        this.Body.y.aTime = 0;
      }
      if (this.Body.y.acceleration !== 0) {
        this.Body.y.aTime += deltaTime;
        velY += this.Body.y.aTime * this.Body.y.acceleration;
      }
      if (Math.abs(velX) < Math.abs(this.Body.x.maxVelocity)) {
        this.Rectangle.x += velX * deltaTime;
      } else {
        dir = (ref = velX < 0) != null ? ref : -{
          1: 1
        };
        this.Rectangle.x += dir * this.Body.x.maxVelocity * deltaTime;
      }
      return this.Rectangle.y += velY * deltaTime;
    };

    Sprite.prototype.Update = function() {
      return this.UpdateSprite();
    };

    Sprite.prototype.GetCurrentDraw = function() {
      if (this.TexturePack) {
        return this.TexturePackAnimation.GetCurrentFrame();
      } else if (this.TextureSheet) {
        return this.TextureSheetAnimation.GetCurrentFrame();
      } else if (this.DrawTexture) {
        return this.DrawTexture;
      }
    };

    Sprite.prototype.Draw = function() {
      var DrawParams, DrawRec, Params, drawParams, frame, ref;
      DrawRec = new Torch.Rectangle(this.Rectangle.x, this.Rectangle.y, this.Rectangle.width, this.Rectangle.height);
      if (this.fixed) {
        DrawRec.x -= this.game.Viewport.x;
        DrawRec.y -= this.game.Viewport.y;
      }
      if (this.TexturePack) {
        return this.game.Draw(this.GetCurrentDraw(), DrawRec, this.DrawParams);
      } else if (this.TextureSheet) {
        drawParams = (ref = this.DrawParams) != null ? ref : {};
        Params = Object.create(drawParams);
        frame = this.GetCurrentDraw();
        Params.clipX = frame.clipX;
        Params.clipY = frame.clipY;
        Params.clipWidth = frame.clipWidth;
        Params.clipHeight = frame.clipHeight;
        Params.IsTextureSheet = true;
        Params.rotation = this.rotation;
        Params.alpha = this.opacity;
        return this.game.Draw(this.DrawTexture, DrawRec, Params);
      } else if (this.DrawTexture) {
        DrawParams = {
          alpha: this.opacity,
          rotation: this.rotation
        };
        return this.game.Draw(this.GetCurrentDraw(), DrawRec, DrawParams);
      }
    };

    Sprite.prototype.OnceEffect = function() {
      return true;
    };

    Sprite.prototype.Once = function() {
      return true;
    };

    Sprite.prototype.Hide = function() {
      this.draw = false;
      return this;
    };

    Sprite.prototype.Show = function() {
      this.draw = true;
      return this;
    };

    Sprite.prototype.Trash = function() {
      this.trash = true;
      return this;
    };

    Sprite.prototype.Clone = function(x, y) {
      var proto;
      proto = this.constructor;
      return new proto(this.game, x, y);
    };

    Sprite.prototype.NotSelf = function(otherSprite) {
      return otherSprite._torch_uid !== this._torch_uid;
    };

    Sprite.prototype.Velocity = function(plane, optionalArgument) {
      if (optionalArgument === null || optionalArgument === void 0) {
        return this.Body.Velocity(plane);
      } else {
        if (typeof optionalArgument !== "number") {
          this.game.FatalError("Cannot set velocity. Expected number, got: " + (typeof optionalArgument));
        }
        this.Body.Velocity(plane, optionalArgument);
        return this;
      }
    };

    Sprite.prototype.Position = function(plane, optionalArgument) {
      if (optionalArgument === null || optionalArgument === void 0) {
        return this.Rectangle[plane];
      } else {
        if (typeof optionalArgument !== "number") {
          this.game.FatalError("Cannot set position. Expected number, got: " + (typeof optionalArgument));
        }
        this.Rectangle[plane] = optionalArgument;
        return this;
      }
    };

    Sprite.prototype.Width = function(optionalArgument) {
      if (optionalArgument === null || optionalArgument === void 0) {
        return this.Rectangle.width;
      } else {
        if (typeof optionalArgument !== "number") {
          this.game.FatalError("Cannot set width. Expected number, got: " + (typeof optionalArgument));
        }
        this.Rectangle.width = optionalArgument;
        return this;
      }
    };

    Sprite.prototype.Height = function(optionalArgument) {
      if (optionalArgument === null || optionalArgument === void 0) {
        return this.Rectangle.height;
      } else {
        if (typeof optionalArgument !== "number") {
          this.game.FatalError("Cannot set height. Expected number, got: " + (typeof optionalArgument));
        }
        this.Rectangle.height = optionalArgument;
        return this;
      }
    };

    Sprite.prototype.Move = function(plane, argument) {
      if (typeof argument !== "number") {
        this.game.FatalError("Cannot move position. Expected number, got: " + (typeof argument));
      }
      this.Position(plane, this.Position(plane) + argument);
      return this;
    };

    Sprite.prototype.Rotation = function(rotation) {
      if (rotation === void 0) {
        return this.rotation;
      } else {
        if (typeof rotation !== "number") {
          this.game.FatalError("Rotation values must be a number. Provided was '" + (typeof rotation) + "'");
        }
        this.rotation = rotation;
        return this;
      }
    };

    Sprite.prototype.Opacity = function(opacity) {
      if (opacity === void 0) {
        return this.opacity;
      } else {
        if (typeof opacity !== "number") {
          this.game.FatalError("Opacity values must be a number. Provided was '" + (typeof opacity) + "'");
        }
        this.opacity = opacity;
        return this;
      }
    };

    Sprite.prototype.DrawIndex = function(drawIndex) {
      if (drawIndex === void 0) {
        return this.drawIndex;
      } else {
        if (typeof drawIndex !== "number") {
          this.game.FatalError("DrawIndex values must be a number. Provided was '" + (typeof drawIndex) + "'");
        }
        this.drawIndex = drawIndex;
        return this;
      }
    };

    Sprite.prototype.GetDirectionVector = function(otherSprite) {
      var vec;
      vec = new Torch.Vector(otherSprite.Rectangle.x - this.Rectangle.x, otherSprite.Rectangle.y - this.Rectangle.y);
      vec.Normalize();
      return vec;
    };

    Sprite.prototype.GetDistance = function(otherSprite) {
      var otherVec, thisVec;
      thisVec = new Torch.Vector(this.Rectangle.x, this.Rectangle.y);
      otherVec = new Torch.Vector(otherSprite.Rectangle.x, otherSprite.Rectangle.y);
      return thisVec.GetDistance(otherVec);
    };

    Sprite.prototype.GetAngle = function(otherSprite) {
      var angle, directionVector;
      directionVector = this.GetDirectionVector(otherSprite);
      angle = Math.atan2(directionVector.y, directionVector.x);
      return angle + (Math.PI + (Math.PI / 2));
    };

    Sprite.prototype.Center = function() {
      var width, x;
      width = this.game.canvasNode.width;
      x = (width / 2) - (this.Rectangle.width / 2);
      this.Rectangle.x = x;
      return this;
    };

    Sprite.prototype.CenterVertical = function() {
      var height, y;
      height = this.game.canvasNode.height;
      y = (height / 2) - (this.Rectangle.height / 2);
      this.Rectangle.y = y;
      return this;
    };

    Sprite.prototype.On = function(eventName, eventHandle) {
      this.events[eventName] = eventHandle;
      return this;
    };

    Sprite.prototype.Emit = function(eventName, eventArgs) {
      if (this.events[eventName] !== void 0) {
        this.events[eventName](eventArgs);
      }
      return this;
    };

    Sprite.prototype.ToErrorString = function() {
      var br, obj, str;
      str = "";
      br = "<br/>";
      obj = {
        _torch_uid: this._torch_uid,
        Rectangle: this.Rectangle
      };
      str += JSON.stringify(obj, null, 4);
      return str + "<br/>";
    };

    Sprite.prototype.CollidesWith = function(otherSprite) {
      var collider, sprite;
      sprite = this;
      collider = {
        AABB: function() {
          return sprite.Rectangle.Intersects(otherSprite.Rectangle);
        }
      };
      return collider;
    };

    return Sprite;

  })();

  GhostSprite = (function(superClass) {
    extend(GhostSprite, superClass);

    function GhostSprite() {
      return GhostSprite.__super__.constructor.apply(this, arguments);
    }

    GhostSprite.prototype.GHOST_SPRITE = true;

    return GhostSprite;

  })(Sprite);

  Torch.Sprite = Sprite;

  Torch.GhostSprite = GhostSprite;

}).call(this);
