// Generated by CoffeeScript 1.10.0
(function() {
  var Text, cnv,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  cnv = document.createElement("CANVAS");

  cnv.width = 500;

  cnv.height = 500;

  Torch.measureCanvas = cnv.getContext("2d");

  Text = (function(superClass) {
    extend(Text, superClass);

    Text.prototype.TEXT = true;

    function Text(game, x, y, data) {
      this.InitText(game, x, y, data);
    }

    Text.prototype.InitText = function(game, x, y, data) {
      this.InitSprite(game, x, y);
      this.data = data;
      this.font = "Arial";
      this.fontSize = 16;
      this.fontWeight = "";
      this.color = "#2b4531";
      this.text = "";
      this.lastText = "";
      this.width = 100;
      this.height = 100;
      return this.Init();
    };

    Text.prototype.Init = function() {
      if (this.data.font) {
        this.font = this.data.font;
      }
      if (this.data.fontSize) {
        this.fontSize = this.data.fontSize;
      }
      if (this.data.fontWeight) {
        this.fontWeight = this.data.fontWeight;
      }
      if (this.data.color) {
        this.color = this.data.color;
      }
      if (this.data.text) {
        this.text = this.data.text;
      }
      if (this.data.rectangle) {
        this.Rectangle = this.data.rectangle;
      }
      if (this.data.buffHeight) {
        this.buffHeight = this.data.buffHeight;
      }
      return this.Render();
    };

    Text.prototype.Render = function() {
      var canvas, image;
      cnv = document.createElement("CANVAS");
      Torch.measureCanvas.font = this.fontSize + "px " + this.font;
      cnv.width = Torch.measureCanvas.measureText(this.text).width;
      cnv.height = this.fontSize + 5;
      if (this.buffHeight) {
        cnv.height += this.buffHeight;
      }
      canvas = cnv.getContext("2d");
      canvas.fillStyle = this.color;
      canvas.font = this.fontWeight + " " + this.fontSize + "px " + this.font;
      canvas.fillText(this.text, 0, cnv.height);
      image = new Image();
      image.src = cnv.toDataURL();
      image.onload = (function(_this) {
        return function() {
          return _this.Bind.Texture(image);
        };
      })(this);
      this.Rectangle.width = cnv.width;
      return this.Rectangle.height = this.fontSize + 5;
    };

    Text.prototype.Update = function() {
      return this.UpdateText();
    };

    Text.prototype.UpdateText = function() {
      Text.__super__.UpdateText.call(this);
      if (this.text !== this.lastText) {
        this.Render();
        return this.lastText = this.text;
      }
    };

    Text.prototype.Text = function(text) {
      if (text === void 0) {
        return this.text;
      } else {
        this.text = text;
        return this;
      }
    };

    Text.prototype.Font = function(font) {
      if (font === void 0) {
        return this.font;
      } else {
        this.font = font;
        return this;
      }
    };

    Text.prototype.FontSize = function(fontSize) {
      if (fontSize === void 0) {
        return this.fontSize;
      } else {
        this.fontSize = fontSize;
        return this;
      }
    };

    Text.prototype.FontWeight = function(fontWeight) {
      if (fontWeight === void 0) {
        return this.fontWeight;
      } else {
        this.fontWeight = fontWeight;
        return this;
      }
    };

    Text.prototype.Color = function(color) {
      if (color === void 0) {
        return this.color;
      } else {
        this.color = color;
        return this;
      }
    };

    return Text;

  })(Torch.Sprite);

  Torch.Text = Text;

}).call(this);
