// Generated by CoffeeScript 1.10.0
(function() {
  var Body, HitBox, Point, Rectangle, Vector;

  Rectangle = (function() {
    function Rectangle(x1, y1, width, height) {
      this.x = x1;
      this.y = y1;
      this.width = width;
      this.height = height;
      this.z = -10;
    }

    Rectangle.prototype.GetOffset = function(rectangle) {
      var halfHeights, halfWidths, offset, sharedXPlane, sharedYPlane, vx, vy;
      vx = (this.x + (this.width / 2)) - (rectangle.x + (rectangle.width / 2));
      vy = (this.y + (this.height / 2)) - (rectangle.y + (rectangle.height / 2));
      halfWidths = (this.width / 2) + (rectangle.width / 2);
      halfHeights = (this.height / 2) + (rectangle.height / 2);
      sharedXPlane = (this.x + this.width) - (rectangle.x + rectangle.width);
      sharedYPlane = (this.y + this.height) - (rectangle.y + rectangle.height);
      offset = {
        x: halfWidths - Math.abs(vx),
        y: halfHeights - Math.abs(vy),
        vx: vx,
        vy: vy,
        halfWidths: halfWidths,
        halfHeights: halfHeights,
        sharedXPlane: sharedXPlane,
        sharedYPlane: sharedYPlane
      };
      return offset;
    };

    Rectangle.prototype.Intersects = function(rectangle) {
      var a, b;
      a = this;
      b = rectangle;
      if (a.x < (b.x + b.width) && (a.x + a.width) > b.x && a.y < (b.y + b.height) && (a.y + a.height) > b.y) {
        return a.GetOffset(b);
      } else {
        return false;
      }
    };

    Rectangle.prototype.ShiftFrom = function(rectangle, transX, transY) {
      var x, y;
      x = null;
      y = null;
      if (transX === void 0) {
        x = rectangle.x;
      } else {
        x = rectangle.x + transX;
      }
      if (transY === void 0) {
        y = rectangle.y;
      } else {
        y = rectangle.y + transY;
      }
      this.x = x;
      return this.y = y;
    };

    return Rectangle;

  })();

  Vector = (function() {
    function Vector(x1, y1) {
      this.x = x1;
      this.y = y1;
    }

    Vector.prototype.Normalize = function() {
      var r, x, y;
      r = (this.x * this.x) + (this.y * this.y);
      r = Math.sqrt(r);
      x = this.x;
      y = this.y;
      this.x = x / r;
      return this.y = y / r;
    };

    Vector.prototype.GetDistance = function(otherVector) {
      var raw;
      raw = Math.pow(otherVector.x - this.x, 2) + Math.pow(otherVector.y - this.y, 2);
      return Math.sqrt(raw);
    };

    return Vector;

  })();

  Body = (function() {
    function Body() {
      var Plane;
      Plane = function() {
        this.velocity = 0;
        this.acceleration = 0;
        this.lv = 0;
        this.la = 0;
        this.aTime = 0;
        return this.maxVelocity = 100;
      };
      this.x = new Plane();
      this.y = new Plane();
    }

    Body.prototype.Velocity = function(plane, velocity) {
      this[plane].velocity = velocity;
      return this;
    };

    Body.prototype.Acceleration = function(plane, acceleration) {
      this[plane].acceleration = acceleration;
      return this;
    };

    return Body;

  })();

  HitBox = (function() {
    function HitBox() {
      this.x = 0;
      this.y = 0;
      this.width = 0;
      this.height = 0;
    }

    return HitBox;

  })();

  Point = (function() {
    function Point(x1, y1) {
      this.x = x1;
      this.y = y1;
    }

    return Point;

  })();

  Torch.Rectangle = Rectangle;

  Torch.Vector = Vector;

  Torch.Body = Body;

  Torch.HitBox = HitBox;

  Torch.Point = Point;

}).call(this);
