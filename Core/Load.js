// Generated by CoffeeScript 1.10.0
(function() {
  var Load;

  Load = (function() {
    function Load(game) {
      this.game = game;
      this.game.Assets = {
        game: this.game,
        GetTexture: function(id) {
          return this.game.Assets.Textures[id];
        },
        GetTexturePack: function(id) {
          return this.game.Assets.TexturePacks[id];
        },
        GetTextureSheet: function(id) {
          return this.game.Assets.TextureSheets[id];
        },
        GetSound: function(id) {
          return this.game.Assets.Sounds[id].audio;
        }
      };
      this.game.Files = [];
      this.textures = this.game.Assets.Textures = [];
      this.texturePacks = this.game.Assets.TexturePacks = [];
      this.textureSheets = this.game.Assets.TextureSheets = [];
      this.sound = this.game.Assets.Sounds = [];
      this.Stack = [];
      this.finish_stack = 0;
      this.loaded = false;
      this.loadLog = "";
    }

    Load.prototype.Sound = function(path, id) {
      if (this.sound[id]) {
        Torch.Error("Asset ID '" + id + "' already exists");
      }
      this.Stack.push({
        _torch_asset: "sound",
        id: id,
        path: path
      });
      return this.finish_stack++;
    };

    Load.prototype.Texture = function(path, id) {
      var i, k, len, p, results;
      if (typeof path === "string") {
        this.Stack.push({
          _torch_asset: "texture",
          id: id,
          path: path
        });
        return this.finish_stack++;
      } else {
        results = [];
        for (i = k = 0, len = path.length; k < len; i = ++k) {
          p = path[i];
          results.push(this.Texture(path[i][0], path[i][1]));
        }
        return results;
      }
    };

    Load.prototype.PixlTexture = function(pattern, pallette, id) {
      var imSrc;
      imSrc = pixl(pattern, pallette).src;
      return this.Stack.push({
        _torch_asset: "texture",
        id: id,
        path: imSrc
      });
    };

    Load.prototype.TexturePack = function(path, id, range, fileType) {
      var i, pack, packId, packPath;
      pack = [];
      i = 1;
      while (i <= range) {
        packPath = path + "_" + i.toString() + "." + fileType;
        packId = id + "_" + i.toString();
        this.Stack.push({
          _torch_asset: "texture",
          id: packId,
          path: packPath
        });
        pack.push(packId);
        this.finish_stack++;
        i++;
      }
      return this.texturePacks[id] = pack;
    };

    Load.prototype.TextureSheet = function(path, id, totalWidth, totalHeight, clipWidth, clipHeight) {
      var columns, i, j, rows, sheet, sheetClip;
      totalWidth += clipWidth;
      rows = totalHeight / clipHeight;
      columns = totalWidth / clipWidth;
      sheet = [];
      this.Stack.push({
        _torch_asset: "texture",
        id: id,
        path: path
      });
      i = j = 0;
      while (i < columns) {
        while (j < rows) {
          sheetClip = {
            clipX: i * clipWidth,
            clipY: j * clipHeight,
            clipWidth: clipWidth,
            clipHeight: clipHeight
          };
          sheet.push(sheetClip);
          j++;
        }
        i++;
      }
      return this.textureSheets[id] = sheet;
    };

    Load.prototype.File = function(path, id) {
      if (!Torch.fs) {
        this.game.FatalError(new Error("Torch.Load.File file '{0}' cannot be loaded, you must import Torch.Electron".format(path)));
      }
      this.finish_stack++;
      return Torch.fs.readFile(path, 'utf8', (function(_this) {
        return function(er, data) {
          _this.finish_stack--;
          if (er) {
            return _this.game.FatalError(new Error("Torch.Load.File file '{0}' could not be loaded".format(path)));
          } else {
            return _this.game.Files[id] = data;
          }
        };
      })(this));
    };

    Load.prototype.Load = function(finishFunction) {
      var TIME_TO_LOAD, _i, _l, aud, im, k, len, ref, stackItem;
      TIME_TO_LOAD = 0;
      ref = this.Stack;
      for (k = 0, len = ref.length; k < len; k++) {
        stackItem = ref[k];
        switch (stackItem._torch_asset) {
          case "texture":
            im = new Image();
            im.src = stackItem.path;
            stackItem.image = im;
            this.textures[stackItem.id] = stackItem;
            im.refId = stackItem.id;
            im.onload = (function(_this) {
              return function() {
                _this.textures[stackItem.id].width = _this.width;
                _this.textures[stackItem.id].height = _this.height;
                return _this.finish_stack--;
              };
            })(this);
            break;
          case "sound":
            aud = new Audio();
            aud.src = stackItem.path;
            stackItem.audio = aud;
            this.sound[stackItem.id] = stackItem;
            this.finish_stack--;
            aud.toggle = function() {
              this.currentTime = 0;
              return this.play();
            };
        }
      }
      _i = (function(_this) {
        return function() {
          TIME_TO_LOAD++;
          if (_this.finish_stack <= 0) {
            $(".font-loader").remove();
            finishFunction();
            return clearInterval(_l);
          }
        };
      })(this);
      return _l = setInterval(_i, 1000 / 60);
    };

    return Load;

  })();

  Torch.Load = Load;

}).call(this);
