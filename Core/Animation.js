// Generated by CoffeeScript 1.10.0
(function() {
  var Animation, StepAnimation, TexturePack, TextureSheet,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Animation = (function() {
    function Animation(game1) {
      this.game = game1;
    }

    Animation.prototype.Run = function() {
      if (this.animating) {
        this.Update();
      }
      if (this.Kill && this.hasRun) {
        return this.Stop();
      }
    };

    Animation.prototype.Start = function() {
      return this.animating = true;
    };

    Animation.prototype.Stop = function() {
      return this.animating = false;
    };

    Animation.prototype.Single = function() {
      this.KillOnFirstRun = true;
      return this.animating = true;
    };

    Animation.prototype.Reset = function() {
      this.elapsedTime = 0;
      this.textureListIndex = 0;
      return this.hasRun = false;
    };

    return Animation;

  })();

  TexturePack = (function(superClass) {
    extend(TexturePack, superClass);

    function TexturePack(texturePack1, game1) {
      this.texturePack = texturePack1;
      this.game = game1;
      this.step = 50;
      this.maxIndex = texturePack.length - 1;
      this.textureIndex = 0;
      this.elapsedTime = 0;
      this.game.animations.push(this);
    }

    TexturePack.prototype.Update = function() {
      this.elapsedTime += this.game.deltaTime;
      if (this.elapsedTime >= this.step) {
        this.elapsedTime = 0;
        this.textureIndex++;
      }
      if (this.textureIndex > this.maxIndex) {
        if (!this.Kill) {
          this.textureIndex = 0;
        }
        if (this.Kill) {
          this.textureIndex = -1;
        }
        return this.hasRun = true;
      }
    };

    TexturePack.prototype.GetCurrentFrame = function() {
      return this.game.Assets.Textures[this.texturePack[this.textureIndex]];
    };

    return TexturePack;

  })(Animation);

  TextureSheet = (function(superClass) {
    extend(TextureSheet, superClass);

    function TextureSheet(TextureSheet1, game1) {
      this.TextureSheet = TextureSheet1;
      this.game = game1;
      this.step = 50;
      this.maxIndex = this.TextureSheet.length - 1;
      this.textureIndex = 0;
      this.elapsedTime = 0;
      this.delay = 0;
      this.delayCount = 0;
      this.onStep = null;
      this.game.animations.push(this);
    }

    TextureSheet.prototype.Update = function() {
      this.elapsedTime += this.game.deltaTime;
      if (this.elapsedTime >= this.step && !(this.hasRun && this.Kill)) {
        this.elapsedTime = 0;
        this.textureIndex++;
        if (this.onStep) {
          this.onStep(this.textureIndex);
        }
      }
      if (this.textureIndex >= this.maxIndex && this.delayCount <= 0) {
        if (!this.Kill) {
          this.textureIndex = 0;
        }
        this.hasRun = true;
        if (this.finishCallBack) {
          this.finishCallBack();
        }
        return this.delayCount = this.delay;
      } else if (this.textureIndex >= this.maxIndex) {
        this.delayCount -= Game.deltaTime;
        return this.textureIndex--;
      }
    };

    TextureSheet.prototype.GetCurrentFrame = function() {
      if (this.TextureSheet) {
        return this.TextureSheet[this.textureIndex];
      }
    };

    TextureSheet.prototype.Step = function(step, onStep) {
      if (step === void 0) {
        return this.step;
      } else {
        this.step = step;
        if (onStep !== void 0) {
          this.onStep = onStep;
        }
      }
      return this;
    };

    return TextureSheet;

  })(Animation);

  StepAnimation = (function(superClass) {
    extend(StepAnimation, superClass);

    function StepAnimation(game, totalTime, steps, start, end) {
      this.InitSprite(game, 0, 0);
      this.steps = steps;
      this.totalTime = totalTime;
      this.interval = totalTime / steps.length;
      this.time = 0;
      this.index = 0;
      this.steps[0]();
      this.start = start;
      this.end = end;
      if (start) {
        this.start();
      }
    }

    StepAnimation.prototype.Update = function() {
      this.time += this.game.deltaTime;
      if (this.time >= this.interval) {
        this.time = 0;
        this.index++;
        this.steps[this.index]();
        if (this.index === this.steps.length - 1) {
          if (this.end) {
            this.end();
          }
          return this.Trash();
        }
      }
    };

    return StepAnimation;

  })(Torch.GhostSprite);

  Torch.Animation = Animation;

  Torch.Animation.TextureSheet = TextureSheet;

  Torch.Animation.TexturePack = TexturePack;

  Torch.Animation.StepAnimation = StepAnimation;

}).call(this);
