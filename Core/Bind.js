// Generated by CoffeeScript 1.10.0
(function() {
  var Bind;

  Bind = (function() {
    function Bind(sprite) {
      this.sprite = sprite;
    }

    Bind.prototype.Reset = function() {
      if (this.sprite.TextureSheetAnimation) {
        this.sprite.TextureSheetAnimation.Stop();
        this.sprite.anim = null;
        this.sprite.TextureSheet = null;
      }
      if (this.sprite.TexturePackAnimation) {
        this.sprite.TexturePackAnimation.Stop();
        this.sprite.anim = null;
        return this.sprite.TexturePack = null;
      }
    };

    Bind.prototype.Texture = function() {
      return function(textureId, optionalParameters) {
        var scale, tex;
        tex = null;
        if (typeof textureId === "string") {
          tex = this.sprite.game.Assets.Textures[textureId];
          if (!tex) {
            this.sprite.game.FatalError("Sprite.Bind.Texture given textureId '" + textureId + "' was not found");
          }
        } else {
          tex = textureId;
        }
        scale = 1;
        this.Reset();
        if (Torch.Scale && !this.sprite.TEXT) {
          scale = Torch.Scale;
        }
        if (typeof textureId === "string") {
          this.sprite.DrawTexture = tex;
        } else {
          this.sprite.DrawTexture = {
            image: textureId
          };
        }
        this.sprite.Rectangle.width = tex.width * scale;
        this.sprite.Rectangle.height = tex.height * scale;
        return this.sprite.DrawTexture;
      };
    };

    Bind.prototype.TexturePack = function() {

      /*
      this whole thing needs to be re-written
      here is the old javascript:
      
          var that = this;
      
          if (!optionalParameters) optionalParameters = {};
      
          var texturePack = @sprite.game.Assets.TexturePacks[texturePackId];
          if (!texturePack)
          {
              @sprite.game.FatalError(new Error("Sprite.Bind.TexturePack given texturePackId '{0}' was not found".format(texturePackId)));
          }
          else
          {
              @sprite.TexturePack = texturePack;
          }
          var anim = new Torch.Animation.TexturePack(@sprite.TexturePack, @sprite.game);
      
          if (optionalParameters.step) anim.step = optionalParameters.step;
      
          anim.Start();
          @sprite.TexturePackAnimation = anim;
          @sprite.Rectangle.width = anim.GetCurrentFrame().width;
          @sprite.Rectangle.height = anim.GetCurrentFrame().height;
          return anim;
       */
    };

    Bind.prototype.TextureSheet = function(textureSheetId, optionalParameters) {
      var anim, drawTexture, textureSheet;
      if (optionalParameters == null) {
        optionalParameters = {};
      }
      textureSheet = this.sprite.game.Assets.TextureSheets[textureSheetId];
      drawTexture = this.sprite.game.Assets.Textures[textureSheetId];
      if (!textureSheet || !drawTexture) {
        this.sprite.game.FatalError("Sprite.Bind.TextureSheet given textureSheetId '" + textureSheetId + "' was not found");
      } else {
        this.sprite.DrawTexture = drawTexture;
        this.sprite.TextureSheet = textureSheet;
      }
      anim = new Torch.Animation.TextureSheet(this.sprite.TextureSheet, this.sprite.game);
      anim.sprite = this.sprite;
      if (optionalParameters.delay) {
        anim.delay = optionalParameters.delay;
        anim.delayCount = anim.delay;
      }
      if (optionalParameters.step) {
        anim.step = optionalParameters.step;
      }
      anim.Start();
      this.sprite.TextureSheetAnimation = anim;
      this.sprite.Rectangle.width = anim.GetCurrentFrame().clipWidth * Torch.Scale;
      this.sprite.Rectangle.height = anim.GetCurrentFrame().clipHeight * Torch.Scale;
      return anim;
    };

    return Bind;

  })();

  Torch.Bind = Bind;

}).call(this);
